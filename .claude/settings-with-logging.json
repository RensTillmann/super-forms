{
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Bash",
        "hooks": [
          {
            "type": "command",
            "command": "python3 .claude/claude-logger.py commands '{\"description\": \"Command validation hook\", \"command\": \"bash\", \"status\": \"validating\"}' && echo 'Running command validation hook...' && python3 -c \"import json, sys, re; data = json.load(sys.stdin); cmd = data.get('tool_input', {}).get('command', ''); issues = []; issues.extend(['Use \\'rg\\' (ripgrep) instead of \\'grep\\' for better performance'] if re.search(r'\\bgrep\\b(?!.*\\|)', cmd) else []); issues.extend(['Use \\'rg --files\\' instead of \\'find\\' for better performance'] if re.search(r'\\bfind\\s+\\S+\\s+-name\\b', cmd) else []); [print(f'• {msg}', file=sys.stderr) for msg in issues]; sys.exit(2 if issues else 0)\""
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys; data = json.load(sys.stdin); file_path = data.get('tool_input', {}).get('file_path', ''); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_hook_execution(data)\" && echo 'Pre-validation: WordPress development checks...' && python3 -c \"import json, sys, re; data = json.load(sys.stdin); file_path = data.get('tool_input', {}).get('file_path', ''); issues = []; issues.extend(['WordPress files should use proper prefixes (super_forms_, SUPER_FORMS_)'] if file_path.endswith('.php') and 'src/' in file_path else []); issues.extend(['Consider WordPress security: sanitization, nonces, capability checks'] if file_path.endswith('.php') and any(x in file_path for x in ['admin', 'ajax', 'form']) else []); [print(f'• {msg}', file=sys.stderr) for msg in issues]; sys.exit(0)\""
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys; data = json.load(sys.stdin); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_event('phpcs', {'tool': data.get('tool_name'), 'file': data.get('tool_input', {}).get('file_path', 'unknown'), 'status': 'running'})\" && echo 'Running WordPress PHPCS validation...' && if [ -f composer.json ] && [ -f phpcs.xml ] && grep -q 'wp-coding-standards' composer.json; then if [ -f vendor/bin/phpcs ]; then VIOLATIONS=$(vendor/bin/phpcs --report=summary --standard=phpcs.xml src/ 2>/dev/null | grep -o '[0-9]\\+ ERRORS\\? AND [0-9]\\+ WARNINGS\\?' || echo '0 ERRORS AND 0 WARNINGS'); python3 -c \"import json, sys; exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_phpcs_check(1, 0 if 'ERROR' not in sys.argv[1] else 1)\" \"$VIOLATIONS\" || echo 'PHPCS validation completed - logged results'; else echo 'PHPCS not installed - run: composer install --dev'; fi; fi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys; data = json.load(sys.stdin); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_command('jshint', 'JavaScript validation check', True)\" && echo 'Running JavaScript validation...' && if [ -f package.json ] && grep -q '\"jshint\"' package.json; then npm run jshint 2>/dev/null || echo 'JSHint check completed with warnings'; fi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys; data = json.load(sys.stdin); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_command('wp-plugin-check', 'WordPress Plugin Check validation', True)\" && echo 'WordPress Plugin Check validation...' && if command -v wp >/dev/null 2>&1; then wp plugin check super-forms --format=summary 2>/dev/null || echo 'Plugin Check: Install via wp plugin install plugin-check --activate'; else echo 'WP-CLI not available for Plugin Check'; fi"
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "echo 'WordPress security validation...' && python3 -c \"import json, sys, re, os; data = json.load(sys.stdin); file_path = data.get('tool_input', {}).get('file_path', ''); content = data.get('tool_input', {}).get('content', '') or data.get('tool_input', {}).get('new_string', ''); issues = []; issues.extend(['Missing nonce verification'] if file_path.endswith('.php') and re.search(r'\\$_POST|\\$_GET|\\$_REQUEST', content) and not re.search(r'wp_verify_nonce|wp_nonce_field', content) else []); issues.extend(['Missing input sanitization'] if file_path.endswith('.php') and re.search(r'\\$_(POST|GET|REQUEST)', content) and not re.search(r'sanitize_|esc_|wp_kses', content) else []); issues.extend(['Missing capability check'] if file_path.endswith('.php') and re.search(r'admin|manage|delete', content) and not re.search(r'current_user_can|is_admin', content) else []); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_security_check(file_path, issues); [print(f'⚠️  {msg}', file=sys.stderr) for msg in issues]; sys.exit(0)\""
          }
        ]
      },
      {
        "matcher": "Write|Edit|MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"import json, sys; data = json.load(sys.stdin); exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_sync_operation('sync-to-webserver.sh', True, 'Attempting sync to webserver')\" && echo 'Syncing to webserver...' && if [ -f sync-to-webserver.sh ]; then bash sync-to-webserver.sh && python3 -c \"exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_sync_operation('sync-to-webserver.sh', True, 'Sync completed successfully')\" || python3 -c \"exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_sync_operation('sync-to-webserver.sh', False, 'Sync failed')\"; else echo 'sync-to-webserver.sh not found, skipping sync'; python3 -c \"exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_sync_operation('sync-to-webserver.sh', False, 'Sync script not found')\"; fi"
          }
        ]
      }
    ],
    "Stop": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "python3 -c \"exec(open('.claude/claude-logger.py').read()); logger = ClaudeLogger(); logger.log_event('session', {'event': 'session_complete', 'status': 'finished', 'message': 'Development session completed'})\" && echo '🎯 WordPress Plugin Development Session Complete!' && echo '' && echo 'Final validation checklist:' && echo '- Frontend forms load correctly' && echo '- Admin functionality works' && echo '- No JavaScript console errors' && echo '- Database queries optimized' && echo '- Security measures implemented' && echo '' && if [ -f composer.json ] && [ -f vendor/bin/phpcs ]; then echo 'Running final PHPCS check...'; vendor/bin/phpcs --report=summary --standard=phpcs.xml src/ 2>/dev/null || echo 'PHPCS issues found - review before deployment'; fi && if [ -f package.json ] && grep -q '\"jshint\"' package.json; then echo 'Running final JSHint check...'; npm run jshint 2>/dev/null || echo 'JSHint warnings found'; fi && echo '' && echo 'Log files created in .claude/logs/ directory' && echo 'Remember: Test the actual functionality before claiming it works!'"
          }
        ]
      }
    ]
  }
}