// Init dropdowns
SUPER.init_dropdowns = function(){
    var $ = jQuery;
    $('.super-dropdown-ui').each(function(){
        if($(this).children('.super-placeholder').html()==''){
            var $first_item = $(this).children('li:eq(1)');
            $first_item.addClass('selected');
            $(this).children('.super-placeholder').attr('data-value',$first_item.attr('data-value')).html($first_item.html());
        }
    });
}

// init Skype
SUPER.init_skype = function(){
    var $ = jQuery;
    $('.super-skype-button').each(function(){
        var $parent = $(this).parents('.super-skype:eq(0)');
        if(!$parent.hasClass('rendered')){
            $parent.addClass('rendered');
            Skype.ui({
                "name": $(this).data('method'),
                "element": $(this).attr('id'),
                "participants": [$(this).data('username')],
                "imageSize": $(this).data('size'),
                "imageColor": $(this).data('color'),
            });
        }
    });
}

// init Datepicker
SUPER.init_datepicker = function(){
    var $ = jQuery;
    
    // Init datepickers
    $('.super-datepicker').each(function(){
        var $this = $(this);
        var $name = $this.attr('name');
        var $connected_min = $this.data('connected_min');
        var $connected_max = $this.data('connected_max');
        var $min = $this.data('minlength');
        var $max = $this.data('maxlength');
        if(typeof $min !== 'undefined'){
            $min = $min.toString();
        }
        if(typeof $max !== 'undefined'){
            $max = $max.toString();
        }
        var $format = $this.data('format');
        var $range = $this.data('range');
        $this.datepicker({
            //beforeShowDay: function(date) {
            //    var day = date.getDay();
            //    return [day != 0,''];
            //},
            onClose: function( selectedDate ) {
                if(typeof $connected_min !== 'undefined'){
                    if($connected_min!=''){
                        $('.super-shortcode-field.super-datepicker[name="'+$connected_min+'"]').datepicker('option', 'minDate', selectedDate );
                    }
                }
                if(typeof $connected_max !== 'undefined'){
                    if($connected_max!=''){
                        $('.super-shortcode-field.super-datepicker[name="'+$connected_max+'"]').datepicker('option', 'maxDate', selectedDate );
                    }
                }
            },
            beforeShow: function(input, inst) {
                var widget = $(inst).datepicker('widget');
                widget.addClass('super-datepicker-dialog');
                $('.super-datepicker[data-connected_min="'+$(this).attr('name')+'"]').each(function(){
                    $this.datepicker('option', 'minDate', $(this).val() );
                });
                $('.super-datepicker[data-connected_max="'+$(this).attr('name')+'"]').each(function(){
                    $this.datepicker('option', 'maxDate', $(this).val() );
                });
            },
            yearRange: $range, //'-100:+5', // specifying a hard coded year range
            changeYear: true,
            showAnim: '',
            showOn: $(this).parent().find('.super-icon'),
            minDate: $min,
            maxDate: $max,
            dateFormat: $format, //mm/dd/yy    -    yy-mm-dd    -    d M, y    -    d MM, y    -    DD, d MM, yy    -    &apos;day&apos; d &apos;of&apos; MM &apos;in the year&apos; yy
            monthNames: super_elements_i18n.monthNames, // set month names
            monthNamesShort: super_elements_i18n.monthNamesShort, // set short month names
            dayNames: super_elements_i18n.dayNames, // set days names
            dayNamesShort: super_elements_i18n.dayNamesShort, // set short day names
            dayNamesMin: super_elements_i18n.dayNamesMin, // set more short days names
            weekHeader: super_elements_i18n.weekHeader,
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        });
        $(this).parent().find('.super-icon').css('cursor','pointer');
    });
    $('.super-datepicker').parent().find('.super-icon').on('click',function(){
        $(this).parent().find('.super-datepicker').datepicker('show');
    });
    $('.super-datepicker').on('click',function(){
        $(this).datepicker('show');
    });
        
    // Init timepickers
    $('.super-timepicker').each(function(){
        var format = $(this).data('format');
        var step = $(this).data('step');
        var range = $(this).data('range');
        var min = $(this).data('minlength');
        var max = $(this).data('maxlength');
        var duration = $(this).data('duration');        
        var finalrange = []
        if((range!='') && (typeof range !== 'undefined')){
            var range = range.split('\n');
            $.each(range, function(key, value ) {
                finalrange.push(value.split('|'));
            });
        }
        if(min=='') min = '00:00';
        if(max=='') max = '23:59';
        $(this).timepicker({
            className: 'super-timepicker-dialog',
            timeFormat: format,
            step: step,
            disableTimeRanges: finalrange,
            minTime: min,
            maxTime: max,
            showDuration: duration,
        });
        $(this).parent().find('.super-icon').css('cursor','pointer');
    });
    $('.super-timepicker').parent().find('.super-icon').on('click',function(){
        $(this).parent().find('.super-timepicker').timepicker('show');
    });
    $('.super-timepicker').on('click',function(){
        $(this).timepicker('show');
    });
}

// Initialize button colors
SUPER.init_button_colors = function( $this ) {    
    var $ = jQuery;
    if(typeof $this === 'undefined'){
        $('.super-button a').each(function(){
            SUPER.init_button_colors( $(this) );
        });
    }else{
        var $this = $this.parent(),
            $type = $this.data('type'),
            $color = $this.data('color'),
            $hover_color = $this.data('hover-color'),
            $light = $this.data('light'),
            $hover_light = $this.data('hover-light'),
            $dark = $this.data('dark'),
            $hover_dark = $this.data('hover-dark'),
            $font = $this.data('font'),
            $font_hover = $this.data('font-hover');

        if($type=='diagonal'){
            if(typeof $color !== 'undefined'){
                $this.find('a').css('border-color', $color);
            }else{
                $this.find('a').css('border-color', '');
            }
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color', $font);
                $this.find('a .super-button-name i').css('color', $font);
            }else{
                $this.find('a .super-button-name').css('color', '');
                $this.find('a .super-button-name i').css('color', '');
            }
            $this.find('a .super-after').css('background-color',$color);
        }
        if($type=='outline'){
            if(typeof $color !== 'undefined'){
                $this.find('a').css('border-color', $color);
            }else{
                $this.find('a').css('border-color', '');
            }
            $this.find('a').css('background-color', '');
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color', $font);
                $this.find('a .super-button-name i').css('color', $font);
            }else{
                $this.find('a .super-button-name').css('color', '');
                $this.find('a .super-button-name i').css('color', '');
            }
        }
        if($type=='2d'){
            $this.find('a').css('background-color', $color);
            $this.find('a').css('border-color', $light);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
        }
        if($type=='3d'){
            $this.find('a').css('background-color', $color);
            $this.find('a').css('color', $dark).css('border-color', $light);
            if(typeof $font_hover !== 'undefined'){
                $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
            }else{
                if(typeof $font !== 'undefined'){
                    $this.find('a .super-button-name, a .super-button-name i').css('color',$font);
                }else{
                    $this.find('a .super-button-name, a .super-button-name i').css('color','');
                }
            }
        }
        if($type=='flat'){
            $this.find('a').css('background-color', $color);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
        }
    }
}

// Init button hover colors
SUPER.init_button_hover_colors = function( $this ) {  
    var $ = jQuery;
    var $type = $this.data('type'),
        $color = $this.data('color'),
        $hover_color = $this.data('hover-color'),
        $light = $this.data('light'),
        $hover_light = $this.data('hover-light'),
        $dark = $this.data('dark'),
        $hover_dark = $this.data('hover-dark'),
        $font = $this.data('font'),
        $font_hover = $this.data('font-hover');
    
    if($type=='2d'){
        $this.find('a').css('background-color', $hover_color);
        $this.find('a').css('border-color', $hover_light);
        $this.find('a .super-button-name, a .super-button-name i').css('color', $font_hover);
    }
    if($type=='flat'){
        $this.find('a').css('background-color', $hover_color);
        $this.find('a .super-button-name, a .super-button-name i').css('color', $font_hover);
    }
    if($type=='outline'){
        if(typeof $hover_color !== 'undefined'){
            $this.find('a').css('background-color',$hover_color);
        }else{
            if(typeof $color !== 'undefined'){
                $this.find('a').css('background-color',$color);
            }else{
                $this.find('a').css('background-color','');
            }
        }
        $this.find('a').css('border-color',$hover_color);
        if(typeof $font_hover !== 'undefined'){
            $this.find('a .super-button-name').css('color',$font_hover);
            $this.find('a .super-button-name i').css('color',$font_hover);
        }else{
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color',$font);
                $this.find('a .super-button-name i').css('color',$font);
            }else{
                $this.find('a .super-button-name').css('color','');
                $this.find('a .super-button-name i').css('color','');
            }
        }
    }
    if($type=='diagonal'){
        if(typeof $color !== 'undefined'){
            $this.find('a').css('border-color', $hover_color);
        }else{
            $this.find('a').css('border-color', '');
        }
        if(typeof $font !== 'undefined'){
            $this.find('a .super-button-name').css('color', $font_hover);
            $this.find('a .super-button-name i').css('color', $font_hover);
        }else{
            $this.find('a .super-button-name').css('color', '');
            $this.find('a .super-button-name i').css('color', '');
        }
        $this.find('a .super-after').css('background-color',$hover_color);
        return false;
    }
    if($type=='2d'){
        return false;
    }
    if(typeof $hover_color !== 'undefined'){
        $this.find('a').css('background-color',$hover_color);
        if($type=='3d'){
            $this.find('a').css('color',$hover_dark).css('border-color',$hover_light);
            if(typeof $font_hover !== 'undefined'){
                $this.find('a .super-button-name').css('color',$font_hover);
                $this.find('a .super-button-name i').css('color',$font_hover);
            }else{
                if(typeof $font !== 'undefined'){
                    $this.find('a .super-button-name').css('color',$font);
                    $this.find('a .super-button-name i').css('color',$font);
                }else{
                    $this.find('a .super-button-name').css('color','');
                    $this.find('a .super-button-name i').css('color','');
                }
            }
        }
    }
}


// Function to unset focus on fields
SUPER.unsetFocus = function(){
    var $ = jQuery;
    $('.super-field').removeClass('super-focus').blur();
}


jQuery(document).ready(function ($) {
    
    SUPER.init_dropdowns();
    SUPER.init_skype();
    SUPER.init_datepicker();

    var $doc = $(document);    

    // @since 1.2.4
    $doc.on('click', '.super-quantity .super-minus-button, .super-quantity .super-plus-button', function(){
        var $this = $(this);
        var $input_field = $this.parent().find('.super-shortcode-field');
        var $min = $input_field.data('minnumber');
        var $max = $input_field.data('maxnumber');
        var $field_value = $input_field.val();
        if($field_value=='') $field_value = 0;
        var $steps = $input_field.data('steps');
        if($this.hasClass('super-plus-button')){
            var $new_value = parseFloat($field_value) + parseFloat($steps);
            if($new_value > $max) return false;
        }else{
            var $new_value = parseFloat($field_value) - parseFloat($steps);
            if($new_value < $min) return false;
        }
        $input_field.val($new_value.toFixed(0));
        SUPER.after_field_change_blur_hook();
    });

    // @since 1.1.7
    function after_duplicate_column_fields($column, $field_names, $field_labels){
        var $counter = 0;
        $column.children('.super-duplicate-column-fields').each(function(){
            if($counter>0){
                var $field_counter = 0;
                $(this).find('.super-shortcode-field').each(function(){
                    $(this).attr('name', $field_names[$field_counter]+'_'+($counter+1));
                    $(this).data('email', $field_labels[$field_counter]+' ('+($counter+1)+')');
                    $field_counter++;
                });
            }
            $counter++;
        });
    }
    $doc.on('click', '.super-duplicate-column-fields .super-add-duplicate', function(){
        var $this = $(this);
        var $parent = $this.parents('.super-duplicate-column-fields:eq(0)');
        var $column = $parent.parents('.super-column:eq(0)');
        var $first = $column.find('.super-duplicate-column-fields:eq(0)');
        var $field_names = {};
        var $field_labels = {};
        var $counter = 0;
        $first.find('.super-shortcode-field').each(function(){
            $field_names[$counter] = $(this).attr('name');
            $field_labels[$counter] = $(this).data('email');
            $counter++;
        });
        var $field = $column.find('.super-shortcode-field');
        var $field_name = $field.attr('name');
        var $clone = $parent.clone();
        $($clone).insertAfter($parent);
        after_duplicate_column_fields($column, $field_names, $field_labels);
    });
    $doc.on('click', '.super-duplicate-column-fields .super-delete-duplicate', function(){
        var $this = $(this);
        var $parent = $this.parents('.super-duplicate-column-fields:eq(0)');
        $parent.remove();
    });

    // Close messages
    $doc.on('click', '.super-msg .close', function(){
        $(this).parents('.super-msg:eq(0)').fadeOut(500);
    });

    $doc.on('click', '.super-fileupload-button', function(){
        $(this).parent('div').children('.super-fileupload').trigger('click');
    });
    $doc.on('click', '.super-fileupload-delete', function(){
        $(this).parent('div').remove();    
    });
    
    // @since 1.2.4     - autosuggest text field
    $doc.on('keyup', '.super-field.super-text .super-shortcode-field', function(){
        var $value = $(this).val().toString();
        var $field = $(this).parents('.super-field:eq(0)');
        var $wrapper = $(this).parents('.super-field-wrapper:eq(0)');
        if( $value=='' ) {
            $field.removeClass('super-string-found');
        }else{
            var $items = $wrapper.find('.super-dropdown-ui > li');
            var $found = false;
            $items.each(function() {
                var $string_value = $(this).data('search-value').toString();
                if( $string_value.toLowerCase().search($value.toLowerCase())!=-1 ) {
                    $found = true;
                    var $words = [$value]; 
                    var $regex = RegExp($words.join('|'), 'gi');
                    var $replacement = '<span>$&</span>';
                    var $string_bold = $(this).text().replace($regex, $replacement);
                    $(this).html($string_bold);
                    $(this).addClass('super-active');
                }else{
                    $(this).html($string_value);
                    $(this).removeClass('super-active');
                }
            });
            if( $found==true ) {
                $field.addClass('super-string-found').addClass('super-focus');
            }else{
                $field.removeClass('super-string-found');
            }
        }
    });

    // Focus dropdowns
    $doc.on('click', '.super-dropdown-ui, .super-dropdown-arrow', function(){
        var $this = $(this);
        var $element = $this.parents('.super-field:eq(0)').find('.super-dropdown-ui');
        if(!$this.parents('.super-field:eq(0)').hasClass('super-focus-dropdown')){
            $('.super-focus').removeClass('super-focus');
            $('.super-focus-dropdown').removeClass('super-focus-dropdown');
            $this.parents('.super-field:eq(0)').addClass('super-focus').addClass('super-focus-dropdown');
        }
    });
    $doc.on('mouseleave', '.super-dropdown-ui', function(){
        $(this).parents('.super-field:eq(0)').removeClass('super-focus-dropdown'); 
    });

    // Focus fields
    $doc.on('focus','.super-text .super-shortcode-field, .super-password .super-shortcode-field, .super-textarea .super-shortcode-field, .super-dropdown .super-shortcode-field, .super-countries .super-shortcode-field, .super-date .super-shortcode-field, .super-time .super-shortcode-field',function(){
        SUPER.unsetFocus();
        $(this).parents('.super-field:eq(0)').addClass('super-focus'); 
    });
    $doc.on('blur','.super-text .super-shortcode-field, .super-password .super-shortcode-field, .super-textarea .super-shortcode-field, .super-dropdown .super-shortcode-field, .super-countries .super-shortcode-field, .super-date .super-shortcode-field, .super-time .super-shortcode-field',function(e){
        if(!$(this).parents('.super-field:eq(0)').hasClass('super-auto-suggest')){
            SUPER.unsetFocus();
        }
    });
    
    //Update autosuggest
    $doc.on('click', '.super-auto-suggest .super-dropdown-ui li', function(e){
        var $this = $(this);
        var $field = $this.parents('.super-field:eq(0)');
        var $parent = $this.parent();
        var $value = $this.text();
        $parent.find('li').removeClass('super-active');
        $(this).addClass('super-active');
        $field.find('.super-shortcode-field').val($value);
        $field.removeClass('super-focus').removeClass('super-string-found');
    });

    //Update dropdown
    $doc.on('click', '.super-dropdown-ui li:not(.super-placeholder)', function(e){
        e.stopPropagation();
        if($(this).parents('.super-field:eq(0)').hasClass('super-focus-dropdown')){
            $(this).parents('.super-field:eq(0)').removeClass('super-focus-dropdown');
            var $input = $(this).parents('.super-field-wrapper:eq(0)').children('input');
            var $parent = $(this).parents('.super-dropdown-ui:eq(0)');
            var $placeholder = $parent.find('.super-placeholder:eq(0)');
            var $multiple = false;
            if($parent.hasClass('multiple')) $multiple = true;
            if($multiple==false){
                var $value = $(this).attr('data-value');
                var $name = $(this).html();
                $placeholder.html($name).attr('data-value',$value).addClass('selected');
                $parent.find('li').removeClass('selected');
                $(this).addClass('selected');
                $input.val($value);
                var $validation = $input.data('validation');
                var $duration = SUPER.get_duration($input.parents('.super-form'));
                if(typeof $validation !== 'undefined' && $validation !== false){
                    SUPER.handle_validations($input, $validation, $duration);
                }
                SUPER.after_dropdown_change_hook($input);
            }else{
                var $max = $input.attr('data-maxlength');
                var $min = $input.attr('data-minlength');
                var $total = $parent.find('li.selected:not(.super-placeholder)').length;
                if($(this).hasClass('selected')){
                    if($total>1){
                        if($total <= $min) return false;
                        $(this).removeClass('selected');    
                    }
                }else{
                    if($total >= $max) return false;
                    $(this).addClass('selected');    
                }
                var $names = '';
                var $values = '';
                var $total = $parent.find('li.selected:not(.super-placeholder)').length;
                var $counter = 1;
                $parent.find('li.selected:not(.super-placeholder)').each(function(){
                    if(($total == $counter) || ($total==1)){
                        $names += $(this).html();
                        $values += $(this).attr('data-value');
                    }else{
                        $names += $(this).html()+',';
                        $values += $(this).attr('data-value')+',';
                    }
                    $counter++;
                });
                $placeholder.html($names);
                $input.val($values);
                var $validation = $input.data('validation');
                var $duration = SUPER.get_duration($input.parents('.super-form'));
                if(typeof $validation !== 'undefined' && $validation !== false){
                    SUPER.handle_validations($input, $validation, $duration);
                }
                SUPER.after_dropdown_change_hook($input);
            }
        }
    });

    $doc.on('click','.super-back-to-top',function(){
        $('html, body').animate({
            scrollTop: 0
        }, 1000);
    });

    $doc.on('change blur', '.super-shortcode-field', function (e) {
        var keyCode = e.keyCode || e.which; 
        if (keyCode != 9) { 
            var $duration = SUPER.get_duration($(this).parents('.super-form'));
            var $this = $(this);
            var $validation = $this.data('validation');
            if(typeof $validation !== 'undefined' && $validation !== false){
                SUPER.handle_validations($this, $validation, $duration);
            }
            SUPER.after_field_change_blur_hook($this);
        }
    });
    
    $doc.on('click', '.super-form input[type="radio"]', function () {
        var $parent = $(this).parents('.super-field-wrapper');
        var $this = $parent.children('input[type="hidden"]');
        var $label = $(this).parent('label');
        $parent.find('label').removeClass('super-selected');
        $label.addClass('super-selected');
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        $this.val($(this).val());
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.after_radio_change_hook($this);
    });

    $doc.on('click', '.super-form input[type="checkbox"]', function () {
        var $field = $(this),
            $parent = $field.parent().parent(),
            $label = $field.parent('label'),
            $limit = $parent.children('input').data('maxlength'),
            $checked = $parent.find('input:checked'),
            $value = '',
            $counter = 0;
        $parent.find('label').removeClass('super-selected');
        $checked.each(function () {
            $(this).parent('label').addClass('super-selected');
            if ($counter == 0) $value = $(this).val();
            if ($counter != 0) $value = $value + ',' + $(this).val();
            $counter++;
        });
        var $this = $field.parent().parent().children('input[type="hidden"]');
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        $parent.children('input[type="hidden"]').val($value);
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.after_checkbox_change_hook($parent.children('input[type="hidden"]'));
    });
    
    $doc.on('change', '.super-form select', function () {
        var $this = $(this);
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        var $min = $this.data('minlength');
        var $max = $this.data('maxlength');
        if(($min>0) && ($this.val() == null)){
            SUPER.handle_errors($this, $duration);
        }else if($this.val().length > $max){
            SUPER.handle_errors($this, $duration);
        }else if($this.val().length < $min){
            SUPER.handle_errors($this, $duration);
        }else{
            $this.parents('.super-field:eq(0)').children('p').fadeOut($duration, function() {
                $(this).remove();   
            });
        }
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.after_dropdown_change_hook($this);
    });
    
    SUPER.init_button_colors();
    
    $doc.on('mouseleave','.super-button a',function(){
        $(this).parent().removeClass('super-focus');
        SUPER.init_button_colors( $(this) );
    });
    $doc.on('mouseover','.super-button a',function(){
        SUPER.init_button_hover_colors( $(this).parent() );
    });
    
    // Multi Part Columns
    $doc.on('click','.super-multipart-step',function(){
        var $index = $(this).index();
        var $form = $(this).parents('.super-form:eq(0)');
        var $total = $form.find('.super-multipart').length;
        var $progress = 100 / $total;
        var $progress = $progress * ($index+1);
        var $multipart = $form.find('.super-multipart:eq('+$index+')');
        $form.find('.super-multipart-progress-bar').css('width',$progress+'%');
        $form.find('.super-multipart-step').removeClass('active');
        $form.find('.super-multipart').removeClass('active');
        $multipart.addClass('active');
        $(this).addClass('active');
    });
    
    // Multi Part Next Prev Buttons
    $doc.on('click','.super-prev-multipart, .super-next-multipart',function(){
        var $form = $(this).parents('.super-form:eq(0)');
        var $total = $form.find('.super-multipart').length;
        var $current_step = $form.find('.super-multipart-step.active').index();
        if($(this).hasClass('super-prev-multipart')){
            if($current_step>0){
                $form.find('.super-multipart').removeClass('active');   
                $form.find('.super-multipart-step').removeClass('active');
                $form.find('.super-multipart:eq('+($current_step-1)+')').addClass('active');   
                $form.find('.super-multipart-step:eq('+($current_step-1)+')').addClass('active');
                var $index = $current_step-1;
            }
        }else{
            if($total>$current_step+1){
                $form.find('.super-multipart').removeClass('active');   
                $form.find('.super-multipart-step').removeClass('active');
                $form.find('.super-multipart:eq('+($current_step+1)+')').addClass('active');
                $form.find('.super-multipart-step:eq('+($current_step+1)+')').addClass('active');
                var $index = $current_step+1;
            }
        }
        var $total = $form.find('.super-multipart').length;
        var $progress = 100 / $total;
        var $progress = $progress * ($index+1);
        var $multipart = $form.find('.super-multipart:eq('+$index+')');
        $form.find('.super-multipart-progress-bar').css('width',$progress+'%');
        var $index = 0;
        $form.find('.super-multipart').each(function(){
            if(!$(this).find('.error-active').length){
                $form.find('.super-multipart-steps').find('.super-multipart-step:eq('+$index+')').removeClass('super-error');
            }
            $index++;
        });
        $('html, body').animate({
            scrollTop: $form.offset().top - 30
        }, 500);

        return false;
    });
    

});