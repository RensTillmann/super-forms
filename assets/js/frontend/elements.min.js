// Init dropdowns
SUPER.init_dropdowns = function(){
    $('.super-dropdown-ui').each(function(){
        if($(this).children('.super-placeholder').html()==''){
            var $first_item = $(this).children('li:eq(1)');
            $first_item.addClass('selected');
            $(this).children('.super-placeholder').attr('data-value',$first_item.attr('data-value')).html($first_item.html());
        }
    });
    if ( $.isFunction($.fn.mCustomScrollbar) ) {        
        $(".super-dropdown-ui").mCustomScrollbar({
            theme: 'minimal-dark',
            alwaysShowScrollbar: 1,
            mouseWheel: { 
                scrollAmount: 230,
                deltaFactor: 1,
            }
        });
    }
}

// init Skype
SUPER.init_skype = function(){
    $('.super-skype-button').each(function(){
        Skype.ui({
          "name": $(this).data('method'),
          "element": $(this).attr('id'),
          "participants": [$(this).data('username')],
          "imageSize": $(this).data('size'),
          "imageColor": $(this).data('color'),
        });
    });
}

// init Datepicker
SUPER.init_datepicker = function(){    
    $('.super-datepicker').each(function(){
        var min = $(this).data('minlength');
        var max = $(this).data('maxlength');
        var format = $(this).data('format');
        if(min==0){min = null;}else{if(min<0){min = -min;}else{min = +min;}}
        if(max==0){max = null;}else{if(max<0){max = -max;}else{max = +max;}}
        $(this).datepicker({
            beforeShow: function(input, inst) {
                var widget = $(inst).datepicker('widget');
                widget.addClass('super-datepicker-dialog');
            },
            changeYear: true,
            showAnim: '',
            showOn: $(this).parent().find('.super-icon'),
            minDate: min,
            maxDate: max,
            dateFormat: format, //mm/dd/yy    -    yy-mm-dd    -    d M, y    -    d MM, y    -    DD, d MM, yy    -    &apos;day&apos; d &apos;of&apos; MM &apos;in the year&apos; yy
        });
        $(this).parent().find('.super-icon').css('cursor','pointer');
    });
    $('.super-datepicker').parent().find('.super-icon').on('click',function(){
        $(this).parent().find('.super-datepicker').datepicker('show');
    });
    $('.super-datepicker').on('click',function(){
        $(this).datepicker('show');
    });   
    
    $('.super-timepicker').each(function(){
        var format = $(this).data('format');
        var step = $(this).data('step');
        var range = $(this).data('range');
        var min = $(this).data('minlength');
        var max = $(this).data('maxlength');
        var duration = $(this).data('duration');        
        var finalrange = []
        if((range!='') && (typeof range !== 'undefined')){
            var range = range.split('\n');
            $.each(range, function(key, value ) {
                finalrange.push(value.split('|'));
            });
        }
        if(min=='') min = '00:00';
        if(max=='') max = '23:59';
        $(this).timepicker({
            className: 'super-timepicker-dialog',
            timeFormat: format,
            step: step,
            disableTimeRanges: finalrange,
            minTime: min,
            maxTime: max,
            showDuration: duration,
        });
        $(this).parent().find('.super-icon').css('cursor','pointer');
    });
    $('.super-timepicker').parent().find('.super-icon').on('click',function(){
        $(this).parent().find('.super-timepicker').timepicker('show');
    });
    $('.super-timepicker').on('click',function(){
        $(this).timepicker('show');
    });
}

// Initialize button colors
SUPER.init_button_colors = function( $this ) {    
    
    if(typeof $this === 'undefined'){
        $('.super-button a').each(function(){
            SUPER.init_button_colors( $(this) );
        });
    }else{
        var $this = $this.parent(),
            $type = $this.data('type'),
            $color = $this.data('color'),
            $hover_color = $this.data('hover-color'),
            $light = $this.data('light'),
            $hover_light = $this.data('hover-light'),
            $dark = $this.data('dark'),
            $hover_dark = $this.data('hover-dark'),
            $font = $this.data('font'),
            $font_hover = $this.data('font-hover');

        if($type=='diagonal'){
            if(typeof $color !== 'undefined'){
                $this.find('a').css('border-color', $color);
            }else{
                $this.find('a').css('border-color', '');
            }
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color', $font);
                $this.find('a .super-button-name i').css('color', $font);
            }else{
                $this.find('a .super-button-name').css('color', '');
                $this.find('a .super-button-name i').css('color', '');
            }
            $this.find('a .super-after').css('background-color',$color);
        }
        if($type=='outline'){
            if(typeof $color !== 'undefined'){
                $this.find('a').css('border-color', $color);
            }else{
                $this.find('a').css('border-color', '');
            }
            $this.find('a').css('background-color', '');
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color', $font);
                $this.find('a .super-button-name i').css('color', $font);
            }else{
                $this.find('a .super-button-name').css('color', '');
                $this.find('a .super-button-name i').css('color', '');
            }
        }
        if($type=='2d'){
            $this.find('a').css('background-color', $color);
            $this.find('a').css('border-color', $light);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
        }
        if($type=='3d'){
            $this.find('a').css('background-color', $color);
            $this.find('a').css('color', $dark).css('border-color', $light);
            if(typeof $font_hover !== 'undefined'){
                $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
            }else{
                if(typeof $font !== 'undefined'){
                    $this.find('a .super-button-name, a .super-button-name i').css('color',$font);
                }else{
                    $this.find('a .super-button-name, a .super-button-name i').css('color','');
                }
            }
        }
        if($type=='flat'){
            $this.find('a').css('background-color', $color);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font);
        }
    }
}


// Function to unset focus on fields
SUPER.unsetFocus = function(){
    $('.super-field').removeClass('super-focus').blur();
}

jQuery(document).ready(function ($) {
    
    SUPER.init_dropdowns();
    SUPER.init_skype();
    SUPER.init_datepicker();

    var $doc = $(document);    

    $doc.on('click', '.super-fileupload-button', function(){
        $(this).parent('div').children('.super-fileupload').trigger('click');
    });
    $doc.on('click', '.super-fileupload-delete', function(){
        $(this).parent('div').remove();    
    });
    
    // Focus dropdowns
    $doc.on('click', '.super-dropdown-ui, .super-dropdown-arrow', function(){
        var $this = $(this).parents('.super-field:eq(0)').find('.super-dropdown-ui');
        $this.parents('.super-field:eq(0)').toggleClass('super-focus'); 
        if ( $.isFunction($.fn.mCustomScrollbar) ) {
            if($this.parents('.super-field:eq(0)').find('li.selected:not(.super-placeholder)').length){
                $this.mCustomScrollbar('scrollTo', $this.find('li.selected:not(.super-placeholder):eq(0)'));
            }
        }
    });
    $doc.on('mouseleave', '.super-dropdown-ui', function(){
        $(this).parents('.super-field:eq(0)').removeClass('super-focus'); 
    });

    // Focus fields
    $doc.on('focus','.super-text .super-shortcode-field, .super-password .super-shortcode-field, .super-textarea .super-shortcode-field, .super-dropdown .super-shortcode-field, .super-countries .super-shortcode-field, .super-date .super-shortcode-field, .super-time .super-shortcode-field',function(){
        $(this).parents('.super-field:eq(0)').addClass('super-focus'); 
    });
    $doc.on('blur','.super-text .super-shortcode-field, .super-password .super-shortcode-field, .super-textarea .super-shortcode-field, .super-dropdown .super-shortcode-field, .super-countries .super-shortcode-field, .super-date .super-shortcode-field, .super-time .super-shortcode-field',function(){
        SUPER.unsetFocus();
    });
    
    //Update dropdown
    $doc.on('click', '.super-dropdown-ui li:not(.super-placeholder)', function(){
        var $input = $(this).parents('.super-field-wrapper:eq(0)').children('input');
        var $parent = $(this).parents('.super-dropdown-ui:eq(0)');
        var $placeholder = $parent.find('.super-placeholder:eq(0)');
        var $multiple = false;
        if($parent.hasClass('multiple')) $multiple = true;
        if($multiple==false){
            var $value = $(this).attr('data-value');
            var $name = $(this).html();
            $placeholder.html($name).attr('data-value',$value).addClass('selected');
            $parent.find('li').removeClass('selected');
            $(this).addClass('selected');
            $input.val($value);
            SUPER.conditional_logic();
        }else{
            var $max = $input.attr('data-maxlength');
            var $min = $input.attr('data-minlength');
            var $total = $parent.find('li.selected:not(.super-placeholder)').length;
            if($(this).hasClass('selected')){
                if($total>1){
                    if($total <= $min) return false;
                    $(this).removeClass('selected');    
                }
            }else{
                if($total >= $max) return false;
                $(this).addClass('selected');    
            }
            var $names = '';
            var $values = '';
            var $total = $parent.find('li.selected:not(.super-placeholder)').length;
            var $counter = 1;
            $parent.find('li.selected:not(.super-placeholder)').each(function(){
                if(($total == $counter) || ($total==1)){
                    $names += $(this).html();
                    $values += $(this).attr('data-value');
                }else{
                    $names += $(this).html()+', ';
                    $values += $(this).attr('data-value')+', ';
                }
                $counter++;
            });
            $placeholder.html($names);
            $input.val($values);
            SUPER.conditional_logic();
            return false;
        }
    });

    $doc.on('click','.super-back-to-top',function(){
        $('.mCustomScrollbar').each(function(){
            $(this).mCustomScrollbar('scrollTo', '0px');  
        });
        $('html, body').animate({
            scrollTop: 0
        }, 1000);
    });

    $doc.on('change keyup blur', '.super-shortcode-field', function (e) {
        var $duration = SUPER.get_duration($(this).parents('.super-form'));
        var $this = $(this);
        var $validation = $this.data('validation');
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.FieldCalculator();
    });
    
    $doc.on('click', '.super-form input[type="radio"]', function () {
        var $this = $(this).parent().parent().children('input[type="hidden"]');
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        $this.val($(this).val());
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.FieldCalculator();
    });

    $doc.on('click', '.super-form input[type="checkbox"]', function () {
        var $parent = $(this).parent().parent(),
            $limit = $parent.children('input').data('maxlength'),
            $checked = $parent.find('input:checked'),
            $value = '',
            $counter = 0;
        $checked.each(function () {
            if ($counter == 0) $value = $(this).val();
            if ($counter != 0) $value = $value + ', ' + $(this).val();
            $counter++;
        });
        var $this = $(this).parent().parent().children('input[type="hidden"]');
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        $parent.children('input[type="hidden"]').val($value);
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.FieldCalculator();
    });
    
    $doc.on('keypress', '.super-form input', function (e) {
        if ((e.keyCode ? e.keyCode : e.which) == 13) {
            SUPER.FieldCalculator();
            SUPER.validate_form($(this).parents('.super-form'));
        }
    });

    $doc.on('change', '.super-form select', function () {
        var $this = $(this);
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        var $min = $this.data('minlength');
        var $max = $this.data('maxlength');
        if(($min>0) && ($this.val() == null)){
            SUPER.handle_errors($this, $duration);
        }else if($this.val().length > $max){
            SUPER.handle_errors($this, $duration);
        }else if($this.val().length < $min){
            SUPER.handle_errors($this, $duration);
        }else{
            $this.parents('.super-field:eq(0)').children('p').fadeOut($duration, function() {
                $(this).remove();   
            });
        }
        var $validation = $this.data('validation');
        var $duration = SUPER.get_duration($this.parents('.super-form'));
        if(typeof $validation !== 'undefined' && $validation !== false){
            SUPER.handle_validations($this, $validation, $duration);
        }
        SUPER.FieldCalculator();
    });
    
    SUPER.init_button_colors();
    
    $doc.on('mouseleave','.super-button a',function(){
        SUPER.init_button_colors( $(this) );
    });
    $doc.on('mouseover','.super-button a',function(){
        var $this = $(this).parent(),
            $type = $this.data('type'),
            $color = $this.data('color'),
            $hover_color = $this.data('hover-color'),
            $light = $this.data('light'),
            $hover_light = $this.data('hover-light'),
            $dark = $this.data('dark'),
            $hover_dark = $this.data('hover-dark'),
            $font = $this.data('font'),
            $font_hover = $this.data('font-hover');
        
        if($type=='2d'){
            $this.find('a').css('background-color', $hover_color);
            $this.find('a').css('border-color', $hover_light);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font_hover);
        }
        if($type=='flat'){
            $this.find('a').css('background-color', $hover_color);
            $this.find('a .super-button-name, a .super-button-name i').css('color', $font_hover);
        }
        if($type=='outline'){
            if(typeof $hover_color !== 'undefined'){
                $this.find('a').css('background-color',$hover_color);
            }else{
                if(typeof $color !== 'undefined'){
                    $this.find('a').css('background-color',$color);
                }else{
                    $this.find('a').css('background-color','');
                }
            }
            $this.find('a').css('border-color',$hover_color);
            if(typeof $font_hover !== 'undefined'){
                $this.find('a .super-button-name').css('color',$font_hover);
                $this.find('a .super-button-name i').css('color',$font_hover);
            }else{
                if(typeof $font !== 'undefined'){
                    $this.find('a .super-button-name').css('color',$font);
                    $this.find('a .super-button-name i').css('color',$font);
                }else{
                    $this.find('a .super-button-name').css('color','');
                    $this.find('a .super-button-name i').css('color','');
                }
            }
        }
        if($type=='diagonal'){
            if(typeof $color !== 'undefined'){
                $this.find('a').css('border-color', $hover_color);
            }else{
                $this.find('a').css('border-color', '');
            }
            if(typeof $font !== 'undefined'){
                $this.find('a .super-button-name').css('color', $font_hover);
                $this.find('a .super-button-name i').css('color', $font_hover);
            }else{
                $this.find('a .super-button-name').css('color', '');
                $this.find('a .super-button-name i').css('color', '');
            }
            $this.find('a .super-after').css('background-color',$hover_color);
            return false;
        }
        if($type=='2d'){
            return false;
        }
        if(typeof $hover_color !== 'undefined'){
            $this.find('a').css('background-color',$hover_color);
            if($type=='3d'){
                $this.find('a').css('color',$hover_dark).css('border-color',$hover_light);
                if(typeof $font_hover !== 'undefined'){
                    $this.find('a .super-button-name').css('color',$font_hover);
                    $this.find('a .super-button-name i').css('color',$font_hover);
                }else{
                    if(typeof $font !== 'undefined'){
                        $this.find('a .super-button-name').css('color',$font);
                        $this.find('a .super-button-name i').css('color',$font);
                    }else{
                        $this.find('a .super-button-name').css('color','');
                        $this.find('a .super-button-name i').css('color','');
                    }
                }
            }
        }
    });
    

    
    // Multi Part Columns
    $doc.on('click','.super-multipart-step',function(){
        var $index = $(this).index();
        var $form = $(this).parents('.super-form:eq(0)');
        var $total = $form.find('.super-multipart').length;
        var $progress = 100 / $total;
        var $progress = $progress * ($index+1);
        var $multipart = $form.find('.super-multipart:eq('+$index+')');
        $form.find('.super-multipart-progress-bar').css('width',$progress+'%');
        $form.find('.super-multipart-step').removeClass('active');
        $form.find('.super-multipart').removeClass('active');
        $multipart.addClass('active');
        $(this).addClass('active');
    });
    
    // Multi Part Next Prev Buttons
    $doc.on('click','.super-prev-multipart, .super-next-multipart',function(){
        var $form = $(this).parents('.super-form:eq(0)');
        var $total = $form.find('.super-multipart').length;
        var $current_step = $form.find('.super-multipart-step.active').index();
        if($(this).hasClass('super-prev-multipart')){
            if($current_step>0){
                $form.find('.super-multipart').removeClass('active');   
                $form.find('.super-multipart-step').removeClass('active');
                $form.find('.super-multipart:eq('+($current_step-1)+')').addClass('active');   
                $form.find('.super-multipart-step:eq('+($current_step-1)+')').addClass('active');
                var $index = $current_step-1;
            }
        }else{
            if($total>$current_step+1){
                $form.find('.super-multipart').removeClass('active');   
                $form.find('.super-multipart-step').removeClass('active');
                $form.find('.super-multipart:eq('+($current_step+1)+')').addClass('active');
                $form.find('.super-multipart-step:eq('+($current_step+1)+')').addClass('active');
                var $index = $current_step+1;

            }
        }
        var $total = $form.find('.super-multipart').length;
        var $progress = 100 / $total;
        var $progress = $progress * ($index+1);
        var $multipart = $form.find('.super-multipart:eq('+$index+')');
        $form.find('.super-multipart-progress-bar').css('width',$progress+'%');
        return false;
    });
    

});