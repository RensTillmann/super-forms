(function($) { // Hide scope, no $ conflict

    // Init WP Image Browser
    SUPER.init_image_browser = function(){
        $('.browse-images:not(.initialized), .browse-files:not(.initialized)').each(function () {
            var $this = $(this);
            $this.addClass('initialized');
            var $title = 'Select an Image';
            var $btn_name = 'Add Image';
            var $button = $this.children('.button');
            var $preview = $this.children('.image-preview');
            var $field = $this.children('input');
            var $frame;
            var $id = $field.val();
            if($this.hasClass('browse-files')){
                $title = 'Select an File';
                $btn_name = 'Add File';
                $preview = $this.children('.file-preview');
            }
            $preview.on('click', 'a.delete', function () {
                $field.val('');
                $preview.html('');
            });
            $button.on('click', function () {
                $('.ui-widget-overlay').hide();
                $this.parents('.shortcode-dialog').hide();

                // If the media frame already exists, reopen it.
                if ($frame) {
                    $frame.open();
                    return;
                }

                // Create the media frame.
                $frame = wp.media.frames.downloadable_file = wp.media({
                    title: $title,
                    button: {
                        text: $btn_name
                    },
                    multiple: false
                });

                // When an image is selected, run a callback.
                if($this.hasClass('browse-images')){
                    $frame.on('select', function () {
                        var $selection = $frame.state().get('selection');
                        $selection.map(function ($attachment) {
                            $attachment = $attachment.toJSON();
                            if ($attachment.id) {
                                //$id = $id ? $id + "," + $attachment.id : $attachment.id;
                                $id = $attachment.id;
                                var $url = $attachment.url;
                                if ($attachment.sizes.thumbnail) $url = $attachment.sizes.thumbnail.url;
                                $preview.html('<div class="image"><img src="' + $url + '" /></div><a href="#" class="delete">Delete</a>');
                            }
                        });
                        $field.val($id);

                    });
                }

                // When a file is selected, run a callback.
                if($this.hasClass('browse-files')){
                    $frame.on('select', function () {
                        var $selection = $frame.state().get('selection');
                        $selection.map(function ($attachment) {
                            $attachment = $attachment.toJSON();
                            if ($attachment.id) {
                                //$id = $id ? $id + "," + $attachment.id : $attachment.id;
                                $id = $attachment.id;
                                $preview.html('<div class="image"><img src="' + $attachment.icon + '" /></div><a href="">' + $attachment.filename + '</a><a href="#" class="delete">Delete</a>');
                            }
                        });
                        $field.val($id);
                    });
                }

                $frame.on('close', function () {
                    $('.ui-widget-overlay').show();
                    $this.parents('.shortcode-dialog').show();
                });
                
                // Finally, open the modal.
                $frame.open();
                
            });
        });
    }

    jQuery(document).ready(function ($) {
        var $doc = $(document);
        $doc.on('click', '.super-form-button > a', function () {
            var $form = $(this).parents('.super-form:eq(0)');
            SUPER.conditional_logic(undefined, $form );
            SUPER.validate_form( $form, $(this) );
            return false;
        });
    });

})(jQuery);