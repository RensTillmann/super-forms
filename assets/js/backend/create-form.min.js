"use strict"; // Minimize mutable state :)


const sf_app = {};

// querySelector shorthand
sf_app.q = function(selector){
    return document.querySelector(selector);
}

// Update form width 
sf_app.append_px_unit = function(value){
    if( !isNaN(value) ) {
        // The value does not contain a unit yet, let's append 'px' to it
        return value.replace('px','').trim()+'px';
    }
    return value;
}

sf_app.form_data = localStorage.getItem('sf_form_data');
if(sf_app.form_data){
    sf_app.form_data = JSON.parse(sf_app.form_data);
}else{
    sf_app.form_data = {
        parts : [
            {
                settings : {
                    title : "1",
                    desc : "Desc 1",
                    next : "Next",
                    prev : "Previous"
                },
                elements : {
                    text : {
                        name : "field",
                        placeholder : "Dummy placeholder...",
                        label : "Dummy label"
                    }
                }
            },
            {
                settings : {
                    title : "2",
                    desc : "Desc 2",
                    next : "Next",
                    prev : "Previous"
                },
                elements : {
                    text : {
                        name : "field_2",
                        placeholder : "Dummy placeholder 2...",
                        label : "Dummy label 2"
                    }
                }
            }

        ],
        settings : {},
        theme : {
            form : {
                width : {
                    size: '100%'
                },
                bg_color : "#fff",
                padding : {
                    top : "0",
                    right : "0",
                    bottom : "0",
                    left : "0"
                },
                margin : {
                    top : "0",
                    right : "0",
                    bottom : "0",
                    left : "0"
                },
                border : {
                    top : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    right : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    bottom : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    left : {
                        size : "0",
                        color : "",
                        style : "solid"
                    }
                }
            }
        },
        triggers : [
            {
                on : "submit",
                action : "send_mail",
                priority : "0",
                to : "feeling4design@gmail.com",
                from_email : "no-reply@f4d.nl",
                from_name : "My site title",
                subject : "New request",
                conditions : {}
            },
            {
                on : "submit",
                action : "send_mail",
                priority : "0",
                to : "feeling4design@gmail.com",
                from_email : "no-reply@f4d.nl",
                from_name : "My site title",
                subject : "We received your request!",
                conditions : {}
            }
        ]
    };
    localStorage.setItem('sf_form_data', JSON.stringify(sf_app.form_data));
}

// Save form data in local storage
sf_app.save_form_data = function(data){
    localStorage.setItem('sf_form_data', JSON.stringify(data));
}

// Update form width 
sf_app.update_form_width = function(value){
    if(!value){
        value = sf_app.form_data.theme.form.width.size;
    }else{
        value = sf_app.append_px_unit(value);
        sf_app.form_data.theme.form.width.size = value;
        sf_app.save_form_data(sf_app.form_data);
    }
    sf_app.q('.sf-canvas-wrapper').style.width = value;
}



// Remove any CSS stylesheets
let i = 0;
[].forEach.call(document.styleSheets, function(el) {
    if(el.href){
        //if(el.href.indexOf('super-forms/assets/css')!=-1){
            //document.styleSheets[i].disabled = true;
        //} 
    }
    i++;
});

// Scroll elements horizontally
function sf_scroll_horizontally(e) {
    e = window.event || e;
    var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
    sf_app.q('.sf-elements .sf-items-wrapper').scrollLeft -= (delta*100); // Multiplied by 40
    e.preventDefault();
}
if (sf_app.q('.sf-elements .sf-items-wrapper').addEventListener) {
    var supportsPassive = false;
    try {
        var opts = Object.defineProperty({}, 'passive', {
            get: function() {
                supportsPassive = true;
            }
        });
        window.addEventListener("testPassive", null, opts);
        window.removeEventListener("testPassive", null, opts);
    } catch (e) {}

    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('mousewheel', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // IE9, Chrome, Safari, Opera
    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('DOMMouseScroll', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // Firefox
} else {
    sf_app.q('.sf-elements .sf-items-wrapper').attachEvent('onmousewheel', sf_scroll_horizontally); // IE 6/7/8
}


//function lengthInUtf8Bytes(str) {
//  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
//  var m = encodeURIComponent(str).match(/%[89ABab]/g);
//  return str.length + (m ? m.length : 0);
//}
//const $megabytes = lengthInUtf8Bytes($json)/1000000;
//console.log('megabytes: '+$megabytes);
console.log(super_create_form_i18n);


// Load UI
(function() {
    // Set form width
    sf_app.update_form_width();

    const parts = sf_app.form_data.parts;

    // Generate multi-part steps
    let total_parts = 0;
    Object.keys(parts).forEach(function(key) {
        total_parts++;
    });

    // Generate multi-part steps
    let html  = '';
    Object.keys(parts).forEach(function(key) {
        const part = parts[key];
        if(total_parts==1){
            html += '<li class="super-multipart-step active last-step">';
        }else{
            if((key==0) && (total_parts != (key+1))){
                html += '<li class="super-multipart-step active">';
            }else{
                if(total_parts == (key+1)){
                    html += '<li class="super-multipart-step last-step">';
                }else{
                    html += '<li class="super-multipart-step">';
                }
            }
        }
        html += '<span class="super-multipart-step-wrapper">';
        if(typeof part.icon !== 'undefined' && part.icon!='') {
            html += '<span class="super-multipart-step-icon"><i class="fa fa-'+part.icon+'"></i></span>';
        }
        html += '<span class="super-multipart-step-count">'+(key+1)+'</span>';
        if(typeof part.title !== 'undefined' && part.title!='') {
            html += '<span class="super-multipart-step-name">'+part.title+'</span>';
        }
        if(typeof part.desc !== 'undefined' && part.desc!='') {
            html += '<span class="super-multipart-step-description">'+part.desc+'</span>';
        }
        html += '</span>';
        html += '</li>';
    });
    sf_app.q('.sf-multipart-steps').innerHTML = html;

        /*
        // Create multi-part buttons for this part
        //sf-multipart
        //sf-multipart-steps

        // Here we set the correct progress bar in percentages
        var $progress = 100 / $total;
        var $progress_bar  = '<div class="super-multipart-progress">';
            $progress_bar += '<div class="super-multipart-progress-inner">';
            $progress_bar += '<div class="super-multipart-progress-bar" style="width:'+$progress+'%"></div>';
            $progress_bar += '</div>';
            $progress_bar += '</div>';
        $form.prepend($progress_bar);
        */

    // Generate elements based on form data
    Object.keys(parts).forEach(function(key) {
        const part = parts[key];

        // Create drop area for this part
        let node  = document.createElement('div');
        node.classList.add('sf-drop-area');
        node.innerHTML = key;
        if(key==0){
            node.classList.add('sf-active');
        }
        sf_app.q('.sf-form').appendChild(node);
    });

    //sf-form
    //<div class="sf-drop-area"></div>

    // Remove loading class
    sf_app.q('.sf-builder').classList.remove('loading');
})();


const app = {};
app.panel = {};

// Equivalent for jQuery's .on() function
app.delegate = function(element, event, elements, callback) {
    element.addEventListener(event, function(event) {
        var target = event.target;
        while (target && target !== this) {
            if (target.matches(elements)) {
                callback(event, target);
                return false;
            }
            target = target.parentNode;
        }
    });
};
app.panel.events = {
    keyup : [
        '.sf-canvas-width-fields input'
    ]
    //click : [
    //],

    //input : [
    //],
    //blur : [
    //]
};

// Iterate over all events, and listen to any event being triggered
Object.keys(app.panel.events).forEach(function(event) {
    const elements = app.panel.events[event].join(", ");
    app.delegate(document, event, elements, function(e, target){
        console.log(target);
        console.log(target.dataset.sfaction);
        sf_app[target.dataset.sfaction](target.value);
    });
});
