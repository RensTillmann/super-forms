"use strict"; // Minimize mutable state :)

/*! fast-json-patch, version: 2.0.7 */
const jsonpatch=function(a){function b(d){if(c[d])return c[d].exports;var e=c[d]={i:d,l:!1,exports:{}};return a[d].call(e.exports,e,e.exports,b),e.l=!0,e.exports}var c={};return b.m=a,b.c=c,b.i=function(a){return a},b.d=function(a,c,d){b.o(a,c)||Object.defineProperty(a,c,{configurable:!1,enumerable:!0,get:d})},b.n=function(a){var c=a&&a.__esModule?function(){return a['default']}:function(){return a};return b.d(c,'a',c),c},b.o=function(a,b){return Object.prototype.hasOwnProperty.call(a,b)},b.p='',b(b.s=3)}([function(a,b){function c(a,b){return i.call(a,b)}function d(a){if(Array.isArray(a)){for(var b=Array(a.length),d=0;d<b.length;d++)b[d]=''+d;return b}if(Object.keys)return Object.keys(a);var b=[];for(var e in a)c(a,e)&&b.push(e);return b}function e(a){return-1===a.indexOf('/')&&-1===a.indexOf('~')?a:a.replace(/~/g,'~0').replace(/\//g,'~1')}function f(a,b){var d;for(var g in a)if(c(a,g)){if(a[g]===b)return e(g)+'/';if('object'==typeof a[g]&&(d=f(a[g],b),''!=d))return e(g)+'/'+d}return''}function g(a){if(a===void 0)return!0;if(a)if(Array.isArray(a)){for(var b=0,c=a.length;b<c;b++)if(g(a[b]))return!0;}else if('object'==typeof a)for(var e=d(a),f=e.length,b=0;b<f;b++)if(g(a[e[b]]))return!0;return!1}var h=this&&this.__extends||function(a,c){function b(){this.constructor=a}for(var d in c)c.hasOwnProperty(d)&&(a[d]=c[d]);a.prototype=null===c?Object.create(c):(b.prototype=c.prototype,new b)},i=Object.prototype.hasOwnProperty;b.hasOwnProperty=c,b._objectKeys=d;b._deepClone=function(a){switch(typeof a){case'object':return JSON.parse(JSON.stringify(a));case'undefined':return null;default:return a;}},b.isInteger=function(a){for(var b,c=0,d=a.length;c<d;){if(b=a.charCodeAt(c),48<=b&&57>=b){c++;continue}return!1}return!0},b.escapePathComponent=e,b.unescapePathComponent=function(a){return a.replace(/~1/g,'/').replace(/~0/g,'~')},b._getPathRecursive=f,b.getPath=function(a,b){if(a===b)return'/';var c=f(a,b);if(''===c)throw new Error('Object not found in root');return'/'+c},b.hasUndefined=g;var j=function(a){function b(b,c,d,e,f){a.call(this,b),this.message=b,this.name=c,this.index=d,this.operation=e,this.tree=f}return h(b,a),b}(Error);b.PatchError=j},function(a,b,c){function d(a,b){if(''==b)return a;var c={op:'_get',path:b};return e(a,c),c.value}function e(a,c,e,f){if(void 0===e&&(e=!1),void 0===f&&(f=!0),e&&('function'==typeof e?e(c,0,a,c.path):g(c,0)),''===c.path){var h={newDocument:a};if('add'===c.op)return h.newDocument=c.value,h;if('replace'===c.op)return h.newDocument=c.value,h.removed=a,h;if('move'===c.op||'copy'===c.op)return h.newDocument=d(a,c.from),'move'===c.op&&(h.removed=a),h;if('test'===c.op){if(h.test=k(a,c.value),!1===h.test)throw new b.JsonPatchError('Test operation failed','TEST_OPERATION_FAILED',0,c,a);return h.newDocument=a,h}if('remove'===c.op)return h.removed=a,h.newDocument=null,h;if('_get'===c.op)return c.value=a,h;if(e)throw new b.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902','OPERATION_OP_INVALID',0,c,a);else return h}else{f||(a=l._deepClone(a));var i,j,o,p=c.path||'',q=p.split('/'),r=a,s=1,t=q.length;for(o='function'==typeof e?e:g;;){if(j=q[s],e&&void 0==i&&(void 0===r[j]?i=q.slice(0,s).join('/'):s==t-1&&(i=c.path),void 0!==i&&o(c,0,a,i)),s++,Array.isArray(r)){if('-'===j)j=r.length;else if(e&&!l.isInteger(j))throw new b.JsonPatchError('Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index','OPERATION_PATH_ILLEGAL_ARRAY_INDEX',0,c.path,c);else l.isInteger(j)&&(j=~~j);if(s>=t){if(e&&'add'===c.op&&j>r.length)throw new b.JsonPatchError('The specified index MUST NOT be greater than the number of elements in the array','OPERATION_VALUE_OUT_OF_BOUNDS',0,c.path,c);var h=n[c.op].call(c,r,j,a);if(!1===h.test)throw new b.JsonPatchError('Test operation failed','TEST_OPERATION_FAILED',0,c,a);return h}}else if(j&&-1!=j.indexOf('~')&&(j=l.unescapePathComponent(j)),s>=t){var h=m[c.op].call(c,r,j,a);if(!1===h.test)throw new b.JsonPatchError('Test operation failed','TEST_OPERATION_FAILED',0,c,a);return h}r=r[j]}}}function f(a,c,d,f){if(void 0===f&&(f=!0),d&&!Array.isArray(c))throw new b.JsonPatchError('Patch sequence must be an array','SEQUENCE_NOT_AN_ARRAY');f||(a=l._deepClone(a));for(var g=Array(c.length),h=0,i=c.length;h<i;h++)g[h]=e(a,c[h],d),a=g[h].newDocument;return g.newDocument=a,g}function g(a,c,d,e){if('object'!=typeof a||null===a||Array.isArray(a))throw new b.JsonPatchError('Operation is not an object','OPERATION_NOT_AN_OBJECT',c,a,d);else if(!m[a.op])throw new b.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902','OPERATION_OP_INVALID',c,a,d);else if('string'!=typeof a.path)throw new b.JsonPatchError('Operation `path` property is not a string','OPERATION_PATH_INVALID',c,a,d);else if(0!==a.path.indexOf('/')&&0<a.path.length)throw new b.JsonPatchError('Operation `path` property must start with "/"','OPERATION_PATH_INVALID',c,a,d);else if(('move'===a.op||'copy'===a.op)&&'string'!=typeof a.from)throw new b.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)','OPERATION_FROM_REQUIRED',c,a,d);else if(('add'===a.op||'replace'===a.op||'test'===a.op)&&a.value===void 0)throw new b.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)','OPERATION_VALUE_REQUIRED',c,a,d);else if(('add'===a.op||'replace'===a.op||'test'===a.op)&&l.hasUndefined(a.value))throw new b.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)','OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED',c,a,d);else if(d)if('add'==a.op){var f=a.path.split('/').length,g=e.split('/').length;if(f!==g+1&&f!==g)throw new b.JsonPatchError('Cannot perform an `add` operation at the desired path','OPERATION_PATH_CANNOT_ADD',c,a,d)}else if('replace'===a.op||'remove'===a.op||'_get'===a.op){if(a.path!==e)throw new b.JsonPatchError('Cannot perform the operation at a path that does not exist','OPERATION_PATH_UNRESOLVABLE',c,a,d);}else if('move'===a.op||'copy'===a.op){var i={op:'_get',path:a.from,value:void 0},j=h([i],d);if(j&&'OPERATION_PATH_UNRESOLVABLE'===j.name)throw new b.JsonPatchError('Cannot perform the operation from a path that does not exist','OPERATION_FROM_UNRESOLVABLE',c,a,d)}}function h(a,c,d){try{if(!Array.isArray(a))throw new b.JsonPatchError('Patch sequence must be an array','SEQUENCE_NOT_AN_ARRAY');if(c)f(l._deepClone(c),l._deepClone(a),d||!0);else{d=d||g;for(var e=0;e<a.length;e++)d(a[e],e,c,void 0)}}catch(a){if(a instanceof b.JsonPatchError)return a;throw a}}var i={strict:!0},j=c(2),k=function(c,a){return j(c,a,i)},l=c(0);b.JsonPatchError=l.PatchError,b.deepClone=l._deepClone;var m={add:function(a,b,c){return a[b]=this.value,{newDocument:c}},remove:function(a,b,c){var d=a[b];return delete a[b],{newDocument:c,removed:d}},replace:function(a,b,c){var d=a[b];return a[b]=this.value,{newDocument:c,removed:d}},move:function(a,b,c){var f=d(c,this.path);f&&(f=l._deepClone(f));var g=e(c,{op:'remove',path:this.from}).removed;return e(c,{op:'add',path:this.path,value:g}),{newDocument:c,removed:f}},copy:function(a,b,c){var f=d(c,this.from);return e(c,{op:'add',path:this.path,value:l._deepClone(f)}),{newDocument:c}},test:function(a,b,c){return{newDocument:c,test:k(a[b],this.value)}},_get:function(a,b,c){return this.value=a[b],{newDocument:c}}},n={add:function(a,b,c){return l.isInteger(b)?a.splice(b,0,this.value):a[b]=this.value,{newDocument:c,index:b}},remove:function(a,b,c){var d=a.splice(b,1);return{newDocument:c,removed:d[0]}},replace:function(a,b,c){var d=a[b];return a[b]=this.value,{newDocument:c,removed:d}},move:m.move,copy:m.copy,test:m.test,_get:m._get};b.getValueByPointer=d,b.applyOperation=e,b.applyPatch=f,b.applyReducer=function(a,c){var d=e(a,c);if(!1===d.test)throw new b.JsonPatchError('Test operation failed','TEST_OPERATION_FAILED',0,c,a);return d.newDocument},b.validator=g,b.validate=h},function(a,b,c){function d(a){return null===a||a===void 0}function e(a){return a&&'object'==typeof a&&'number'==typeof a.length&&('function'!=typeof a.copy||'function'!=typeof a.slice?!1:0<a.length&&'number'!=typeof a[0]?!1:!0)}function f(c,f,l){var m,i;if(d(c)||d(f))return!1;if(c.prototype!==f.prototype)return!1;if(j(c))return!!j(f)&&(c=g.call(c),f=g.call(f),k(c,f,l));if(e(c)){if(!e(f))return!1;if(c.length!==f.length)return!1;for(m=0;m<c.length;m++)if(c[m]!==f[m])return!1;return!0}try{var n=h(c),o=h(f)}catch(a){return!1}if(n.length!=o.length)return!1;for(n.sort(),o.sort(),m=n.length-1;0<=m;m--)if(n[m]!=o[m])return!1;for(m=n.length-1;0<=m;m--)if(i=n[m],!k(c[i],f[i],l))return!1;return typeof c==typeof f}var g=Array.prototype.slice,h=c(5),j=c(4),k=a.exports=function(a,b,c){return c||(c={}),a===b||(a instanceof Date&&b instanceof Date?a.getTime()===b.getTime():a&&b&&('object'==typeof a||'object'==typeof b)?f(a,b,c):c.strict?a===b:a==b)}},function(a,b,c){function d(a){return o.get(a)}function e(a,b){return a.observers.get(b)}function f(a,b){a.observers.delete(b.callback)}function g(a){var b=o.get(a.object);h(b.value,a.object,a.patches,''),a.patches.length&&l.applyPatch(b.value,a.patches);var c=a.patches;return 0<c.length&&(a.patches=[],a.callback&&a.callback(c)),c}function h(a,b,c,d){if(b!==a){'function'==typeof b.toJSON&&(b=b.toJSON());for(var e=k._objectKeys(b),f=k._objectKeys(a),g=!1,i=!1,j=f.length-1;0<=j;j--){var l=f[j],m=a[l];if(k.hasOwnProperty(b,l)&&(void 0!==b[l]||void 0===m||!1!==Array.isArray(b))){var n=b[l];'object'==typeof m&&null!=m&&'object'==typeof n&&null!=n?h(m,n,c,d+'/'+k.escapePathComponent(l)):m!==n&&(g=!0,c.push({op:'replace',path:d+'/'+k.escapePathComponent(l),value:k._deepClone(n)}))}else c.push({op:'remove',path:d+'/'+k.escapePathComponent(l)}),i=!0}if(i||e.length!=f.length)for(var l,j=0;j<e.length;j++)l=e[j],k.hasOwnProperty(a,l)||void 0===b[l]||c.push({op:'add',path:d+'/'+k.escapePathComponent(l),value:k._deepClone(b[l])})}}var i={strict:!0},j=c(2),k=c(0),l=c(1),m=c(1);b.applyOperation=m.applyOperation,b.applyPatch=m.applyPatch,b.applyReducer=m.applyReducer,b.getValueByPointer=m.getValueByPointer,b.validate=m.validate,b.validator=m.validator;var n=c(0);b.JsonPatchError=n.PatchError,b.deepClone=n._deepClone,b.escapePathComponent=n.escapePathComponent,b.unescapePathComponent=n.unescapePathComponent;var o=new WeakMap,p=function(){return function(a){this.observers=new Map,this.obj=a}}(),q=function(){return function(a,b){this.callback=a,this.observer=b}}();b.unobserve=function(a,b){b.unobserve()},b.observe=function(a,b){var c,h=d(a);if(!h)h=new p(a),o.set(a,h);else{var i=e(h,b);c=i&&i.observer}if(c)return c;if(c={},h.value=k._deepClone(a),b){c.callback=b,c.next=null;var j=function(){g(c)},l=function(){clearTimeout(c.next),c.next=setTimeout(j)};'undefined'!=typeof window&&(window.addEventListener?(window.addEventListener('mouseup',l),window.addEventListener('keyup',l),window.addEventListener('mousedown',l),window.addEventListener('keydown',l),window.addEventListener('change',l)):(document.documentElement.attachEvent('onmouseup',l),document.documentElement.attachEvent('onkeyup',l),document.documentElement.attachEvent('onmousedown',l),document.documentElement.attachEvent('onkeydown',l),document.documentElement.attachEvent('onchange',l)))}return c.patches=[],c.object=a,c.unobserve=function(){g(c),clearTimeout(c.next),f(h,c),'undefined'!=typeof window&&(window.removeEventListener?(window.removeEventListener('mouseup',l),window.removeEventListener('keyup',l),window.removeEventListener('mousedown',l),window.removeEventListener('keydown',l)):(document.documentElement.detachEvent('onmouseup',l),document.documentElement.detachEvent('onkeyup',l),document.documentElement.detachEvent('onmousedown',l),document.documentElement.detachEvent('onkeydown',l)))},h.observers.set(b,new q(b,c)),c},b.generate=g,b.compare=function(a,b){var c=[];return h(a,b,c,''),c}},function(a,b){function c(a){return'[object Arguments]'==Object.prototype.toString.call(a)}function d(a){return a&&'object'==typeof a&&'number'==typeof a.length&&Object.prototype.hasOwnProperty.call(a,'callee')&&!Object.prototype.propertyIsEnumerable.call(a,'callee')||!1}var e='[object Arguments]'==function(){return Object.prototype.toString.call(arguments)}();b=a.exports=e?c:d,b.supported=c;b.unsupported=d},function(a,b){function c(a){var b=[];for(var c in a)b.push(c);return b}b=a.exports='function'==typeof Object.keys?Object.keys:c,b.shim=c}]);

const sf_app = {};

// querySelector shorthand
sf_app.q = function(selector){
    return document.querySelector(selector);
}

// querySelectorAll shorthand
sf_app.qa = function(selector){
    return document.querySelectorAll(selector);
}

// Get index of element based on parent node
sf_app.index = function(node){
    let index = 0;
    while ( (node = node.previousElementSibling) ) {
        index++;
    }
    return index;
}

// Get object property by string
sf_app.get_prop_by_string = function(obj, propString) {
    if (!propString)
        return obj;
    let prop;
    const props = propString.split('.');
    for(let i = 0, iLen = props.length - 1; i < iLen; i++) {
        prop = props[i];
        const candidate = obj[prop];
        if (candidate !== undefined) {
            obj = candidate;
        } else {
            break;
        }
    }
    return obj[props[i]];
}

/**
 * Get all DOM element up the tree that contain a class, ID, or data attribute
 * @param  {Node} elem The base element
 * @param  {String} selector The class, id, data attribute, or tag to look for
 * @return {Array} Null if no match
 */
sf_app.get_parents = function(elem, selector){
    const parents = [];
    let firstChar;
    if(selector){
        firstChar = selector.charAt(0);
    }
    // Get matches
    for(;elem && elem!==document; elem=elem.parentNode){
        if(selector){
            // If selector is a class
            if(firstChar==='.'){
                if(elem.classList.contains(selector.substr(1))){
                    parents.push(elem);
                }
            }
            // If selector is an ID
            if(firstChar==='#'){
                if(elem.id===selector.substr(1)){
                    parents.push(elem);
                }
            }
            // If selector is a data attribute
            if(firstChar==='['){
                if(elem.hasAttribute(selector.substr(1, selector.length - 1))){
                    parents.push(elem);
                }
            }
            // If selector is a tag
            if(elem.tagName.toLowerCase()===selector){
                parents.push( elem );
            }
        }else{
            parents.push( elem );
        }
    }
    // Return parents if any exist
    if(parents.length===0){
        return null;
    }else{ 
        return parents;
    }
};

// Generate element HTML
sf_app.create_element = function(name, depth){
    if(typeof depth === 'undefined') depth = 0;
    // Generate the element HTML and append it to the canvas
    let node  = document.createElement('div');
    // Add class names, and make sure to remove any numbesr from the 'name' string
    const element_name = name.replace(/[0-9]/g, '');
    node.className = 'sf-element sf-'+element_name;
    // Add the element name as a data attribute
    node.dataset['sfname'] = name;
    // Add the element title as a data attribute
    node.dataset['sftitle'] = super_create_form_i18n.elements[name].title;
    // Add the action to edit the element
    node.dataset['sfaction'] = 'edit_element;'+element_name;
    // Check if we need to add a specific class
    if(super_create_form_i18n.elements[name].class){
        node.classList.add(super_create_form_i18n.elements[name].class);
    }
    let html = '<div class="sf-wrapper">';
    // Check if element can contain inner elements
    const inner = super_create_form_i18n.elements[name].inner;
    if(inner){
        html += '<div class="sf-inner"></div>';
    }
    // Check for custom HTML
    if(super_create_form_i18n.elements[name].html){
        html += super_create_form_i18n.elements[name].html;
    }
    html += '</div>';
    node.innerHTML = html;

    // Only if depth is 0
    if(inner && depth==0){
        Object.keys(inner).forEach(function(key) {
            // If we need to add this item more than 1 time
            if(!inner[key]) inner[key] = 1;
            let i = 0;
            while(inner[key] > i){
                node.querySelector('.sf-inner').appendChild(sf_app.create_element(key, 1));
                i++;
            }
        });
    }

    return node;
}

// Generate element HTML
sf_app.element_html = function(name, settings, inner){
    let extra_class = '',
        html = '',
        title = '';
    if(name=='column'){
        extra_class += ' sf-'+settings.size.replace('/','-');
        title = 'Column '+settings.size;
    }
    if(super_create_form_i18n.elements[name]){
        title = super_create_form_i18n.elements[name].title;
    }
    html += '<div class="sf-element sf-'+name+'" data-sfname="'+name+'" data-sftitle="'+title+'" data-sfaction="edit_element;'+name+'">';
        html += '<div class="sf-wrapper">';
            // If element does not have any inner elements
            if(!inner){
                html += sf_app.element_field_html(name, settings, inner);
            }else{
                // If element has inner elements generate the HTML
                let result = [];
                html += '<div class="sf-inner">';
                Object.keys(inner).forEach(function(key) {
                    const data = inner[key];
                    Object.keys(data).forEach(function(k) {
                        const name = k,
                              settings = data[k].settings,
                              inner = data[k].inner;
                        html += sf_app.element_html(name, settings, inner);
                    });
                });
                html += '</div>';
            }
        html += '</div>';
    html += '</div>';
    console.log(html);
    return html;
};

// Generate element field HTML
sf_app.element_field_html = function(name, settings, inner){
    let html = '',
        label = (settings.label && settings.label.value ? settings.label.value : super_create_form_i18n.elements[name].settings.label.value.default);
    if(label){
        html += '<div class="sf-label-desc">';
            if(label){
                html += '<div class="sf-label">'+label+'</div>';
            }
        html += '</div>';
    }
    html += '<div class="sf-field">';
        html += '<input type="text" placeholder="Dummy placeholder...">';
    html += '</div>';
    return html;
}

// Gather all indexes ordered from low to highest parent
// After we are done gathering all the correct indexes, we can reverse the array
// This way we will get the index from highest to lowest
sf_app.index_array = function(indexes, target, counter, exclude_first){
    if(typeof exclude_first === 'undefined') exclude_first = false;
    const parents = sf_app.get_parents(target, '.sf-element');
    if(exclude_first){
        if(parents[0]) delete parents[0];
    }
    Object.keys(parents).forEach(function(key) {
        let index = sf_app.index(parents[key]);
        indexes[key] = {index: index, name: parents[key].dataset['sfname'], title: parents[key].dataset['sftitle']};
    });
    return indexes.reverse();
}

// Breadcrumb mouseover or click event
sf_app.breadcrumb = function(e, target, name, event){
    if(event=='mouseover'){
        // Find all children of the breadcrumb
        const children = target.parentNode.children,
              list = [],
              index = sf_app.index(target);
        for (var key = 0; key < children.length; key++) {
            // Add child to the list
            list.push(children[key].dataset.index);
            // Stop loop if reached target
            if(index==key) break;
        }
        // Now we have all the elements with their indexes, we can highlight them
        let element = null;
        for (var key = 0; key < list.length; key++) {
            if(!element){
                element = sf_app.qa('.sf-drop-area.sf-active > .sf-element')[list[key]];
            }else{
                // Search for inner element
                element = element.querySelector('.sf-inner').children[list[key]];
            }
        }
        // Remove highlight class from all highlighted elements
        const highlighted = sf_app.qa('.sf-drop-area.sf-active .sf-element.sf-highlighted');
        for (var key = 0; key < highlighted.length; key++) {
            highlighted[key].classList.remove('sf-highlighted');
        }
        // Now highlight the element
        if(element){
            element.classList.add('sf-highlighted');
        }
    }else{
        // Skip if inner element
        if(e.target === e.relatedTarget.parentNode) return;
        // Remove highlight class from all highlighted elements
        const highlighted = sf_app.qa('.sf-drop-area.sf-active .sf-element.sf-highlighted');
        for (var key = 0; key < highlighted.length; key++) {
            highlighted[key].classList.remove('sf-highlighted');
        }
    }
}

// Delete element
sf_app.delete_element = function(e, target){
    target = target.parentNode;
    // Find all children of the breadcrumb
    const panel = sf_app.q('.sf-edit-panel'),
          children = target.parentNode.children,
          list = [],
          index = sf_app.index(target);
    for (var key = 0; key < children.length; key++) {
        // Add child to the list
        list.push(children[key].dataset.index);
        // Stop loop if reached target
        if(index==key) break;
    }
    // Now we have all the elements with their indexes, we can highlight them
    let element = null;
    for (var key = 0; key < list.length; key++) {
        if(!element){
            element = sf_app.qa('.sf-drop-area.sf-active > .sf-element')[list[key]];
        }else{
            // Search for inner element
            element = element.querySelector('.sf-inner').children[list[key]];
        }
    }
    // Remove edit panel
    if(panel) {
        panel.remove();
    }
    // Remove the element
    if(element){
        element.remove();
        if(index==0){
            // Remove breadcrumb
            sf_app.q('.sf-breadcrumb').remove();
        }else{
            // Remove breadcrumb items
            for (var key = (children.length-1); key != 0; key--) {
                // Add child to the list
                console.log(key, index);
                if(key >= index){
                    children[key].remove();
                }
            }
        }
    }
}

// Edit element
sf_app.edit_element = function(e, target, name){
    // Remove highlight class from all highlighted elements
    const highlighted = sf_app.qa('.sf-element.sf-highlighted');
    for (var key = 0; key < highlighted.length; key++) {
        highlighted[key].classList.remove('sf-highlighted');
    }
    // Remove editing class from any previously editing element
    const editing = sf_app.qa('.sf-element.sf-editing');
    for (var key = 0; key < editing.length; key++) {
        editing[key].classList.remove('sf-editing');
    }

    // Now highlight the element
    if(target){
        target.classList.add('sf-editing');
    }

    // Gather indexes based on parents
    const index_array = sf_app.index_array([], target, 0);
    // Generate breadcrumb HTML
    let html = '<ul>';
        Object.keys(index_array).forEach(function(key) {
            html += '<li data-sfaction="breadcrumb;'+index_array[key].name+'" data-index="'+index_array[key].index+'">';
            html += index_array[key].title.replace(/[0-9/]/g, '');
            html += '<span class="sf-tooltip" data-sftooltip="Delete element" data-sftooltip-position="bottom" data-sfaction="delete_element"></span>';
            html += '</li>';
            //search_string += '/'+index_array[key].index+'/'+(index_array[key].name.replace(/[0-9]/g, ''))+'/inner';
        });
    html += '</ul>';
    const breadcrumb = sf_app.q('.sf-breadcrumb');
    if(breadcrumb){
        // Update breadcrumb
        breadcrumb.innerHTML = html
    }else{
        // Create breadcrumb, and insert before first child of builder
        let node  = document.createElement('div');
        node.className = 'sf-breadcrumb';
        node.innerHTML = html;
        const parent = sf_app.q('.sf-builder');
        parent.insertBefore(node, parent.childNodes[0]);
    }

    // Generate Edit Panel
    const edit_panel = sf_app.q('.sf-edit-panel');
    if(edit_panel){
        // Update breadcrumb
        edit_panel.innerHTML = 'Element settings...';
    }else{
        // Get the position relative to the viewport (i.e. the window)
        const w = window,
            d = document,
            e = d.documentElement,
            g = d.getElementsByTagName('body')[0],
            window_width = w.innerWidth || e.clientWidth || g.clientWidth,
            window_height = w.innerHeight|| e.clientHeight|| g.clientHeight,
            target_offset = target.getBoundingClientRect(),
            canvas = sf_app.q('.sf-canvas'),
            canvas_offset = canvas.getBoundingClientRect(),
            form = sf_app.q('.sf-canvas .sf-form'),
            form_offset = form.getBoundingClientRect();
            //form_styles = getComputedStyle(form),
            //form_width = form_offset.width - parseInt(form_styles.paddingLeft) - parseInt(form_styles.paddingRight);

        //console.log(canvas_offset.width, form.width, form.offsetWidth, form.innerWidth);

        // Generate Edit Panel
        let node  = document.createElement('div');
        node.classList.add('sf-edit-panel');
        node.style.position = 'absolute';
        node.style.top = 0;
        node.style.left = 0;
        
        // Set panel width based on canvas width
        node.innerHTML = 'Element settings...';
        node.style.transform = 'translateX(-50%)';

        // Append the node
        sf_app.q('body').appendChild(node);
        node.style.top = (target_offset.top+target_offset.height+10)+'px';
        node.style.left =  (form_offset.left+(form_offset.width/2))+'px';
        node.style.width = canvas_offset.width+'px';

    }
}

// Drop element inside (for instance inside a column)
sf_app.drop_inside = function(e, target, name){

    // Grab current form data
    let data = sf_app.form_data();
    
    // Gather indexes based on parents
    const index_array = sf_app.index_array([], target, 0);

    // Grab the element default values
    const new_element = {};
    new_element[name.replace(/[0-9]/g, '')] = sf_app.get_element_defaults(name);

    // If we need to add this item more than 1 time
    // For instance with columns we require to add 3 columns if we selected to add the 1/3 grid
    if(!super_create_form_i18n.elements[name].times) super_create_form_i18n.elements[name].times = 1;
    let i = 0;
    while(super_create_form_i18n.elements[name].times > i){
        // Append the element
        target.parentNode.querySelector('.sf-inner').appendChild(sf_app.create_element(name));
        // Add the element to the form data
        let search_string = '';
        Object.keys(index_array).forEach(function(key) {
            search_string += '/'+index_array[key].index+'/'+(index_array[key].name.replace(/[0-9]/g, ''))+'/inner';
        });
        search_string = '/parts/0/elements'+search_string;
        // Get current inner data
        let inner_data = jsonpatch.getValueByPointer(data, search_string);
        if(!inner_data){
            // Inner data doesn't exist, create it
            const query = { op : "add", path : search_string, value : [] };
            data = jsonpatch.applyOperation(data, query).newDocument;
            inner_data = jsonpatch.getValueByPointer(data, search_string);
        }
        // Push element to inner data
        inner_data.push(new_element);
        // Push inner data to the form data
        const query = { op: "replace", path: search_string, value: inner_data };
        data = jsonpatch.applyOperation(data, query).newDocument;
        i++; // Continue this loop
    }

    // Update local storage
    sf_app.save_form_data(data);

    // After the element was added, remove dropping class
    sf_app.q('.sf-form').classList.remove('sf-dropping');
    // Also remove all the buttons
    const nodes = sf_app.qa('.sf-drop-inside');
    Object.keys(nodes).forEach(function(key) {
        nodes[key].remove();
    });
    // Remove active class on item in elements list
    sf_app.q('.sf-item.sf-active').classList.remove('sf-active');
}

// Get default setting from an element
sf_app.get_element_defaults = function(name){
    const obj = {},
          defaults = {},
          inner_elements = [],
          settings = super_create_form_i18n.elements[name].settings,
          inner = super_create_form_i18n.elements[name].inner;
    Object.keys(settings).forEach(function(key) {
        if(settings[key].default){
            defaults[key] = settings[key].default;
        }
    });
    obj.settings = defaults;
    if(inner){
        Object.keys(inner).forEach(function(key) {
            const new_element = {};
            new_element[key] = sf_app.get_element_defaults(key);
            inner_elements.push(new_element);
        });
        obj.inner = inner_elements;
    }
    return obj;
}

// Add element to drop area
sf_app.add_element = function(e, target, name){
    // Check if the active drop area has no elements yet, then instantly add it to the canvas
    if(sf_app.q('.sf-drop-area.sf-active').children.length==0){
        // Grab the element default values
        const new_element = {};
        new_element[name.replace(/[0-9]/g, '')] = sf_app.get_element_defaults(name);
        // If we need to add this item more than 1 time
        // For instance with columns we require to add 3 columns if we selected to add the 1/3 grid
        if(!super_create_form_i18n.elements[name].times) super_create_form_i18n.elements[name].times = 1;
        let i = 0;
        const data = sf_app.form_data();
        while(super_create_form_i18n.elements[name].times > i){
            // Append the element
            sf_app.q('.sf-drop-area.sf-active').appendChild(sf_app.create_element(name));
            // Add the element to the form data
            data.parts[0].elements.push(new_element);
            i++;
        }
        // Update local storage
        sf_app.save_form_data(data);
    }else{
        // Add global dropping class
        sf_app.q('.sf-form').classList.add('sf-dropping');
        // There is at least one element, so let's activate dropping status
        // First give clicked element opacity
        sf_app.q('.sf-item.sf-type-'+name).classList.add('sf-active');
        // Add drop here buttons
        const nodes = sf_app.qa('.sf-form .sf-inner');
        Object.keys(nodes).forEach(function(key) {
            let node  = document.createElement('div');
            node.className = 'sf-drop-inside';
            node.dataset['sfaction'] = 'drop_inside;'+name;
            nodes[key].parentNode.appendChild(node);
        });
    }
}

// Get total items of an object
sf_app.obj_total = function(obj){
    let total = 0;
    Object.keys(obj).forEach(function(key) {
        total++;
    });
    return total;
}

// Update form width 
sf_app.append_px_unit = function(value){
    if( !isNaN(value) ) {
        // The value does not contain a unit yet, let's append 'px' to it
        return value.replace('px','').trim()+'px';
    }
    return value;
}

sf_app.form_data = function(){
    let data = localStorage.getItem('sf_form_data');
    if(data){
        return JSON.parse(data);
    }else{
        data = {
            parts : [
                {
                    settings : {
                        title : super_create_form_i18n.Title,
                        desc : super_create_form_i18n.Description,
                        next : super_create_form_i18n.Next,
                        prev : super_create_form_i18n.Previous
                    },
                    elements : []
                    /*
                        {
                            text : {
                                name : super_create_form_i18n.field,
                                placeholder : super_create_form_i18n.Dummy_placeholder,
                                label : super_create_form_i18n.Dummy_label
                            }
                        }
                    ]
                    */
                }
            ],
            settings : {},
            theme : {
                form : {
                    width : {
                        size: '100%'
                    },
                    bg_color : "#fff",
                    padding : {
                        top : "0",
                        right : "0",
                        bottom : "0",
                        left : "0"
                    },
                    margin : {
                        top : "0",
                        right : "0",
                        bottom : "0",
                        left : "0"
                    },
                    border : {
                        top : {
                            size : "0",
                            color : "",
                            style : "solid"
                        },
                        right : {
                            size : "0",
                            color : "",
                            style : "solid"
                        },
                        bottom : {
                            size : "0",
                            color : "",
                            style : "solid"
                        },
                        left : {
                            size : "0",
                            color : "",
                            style : "solid"
                        }
                    }
                }
            },
            triggers : [
                {
                    on : "submit",
                    action : "send_mail",
                    priority : "0",
                    to : "feeling4design@gmail.com",
                    from_email : "no-reply@f4d.nl",
                    from_name : "My site title",
                    subject : "New request",
                    conditions : {}
                },
                {
                    on : "submit",
                    action : "send_mail",
                    priority : "0",
                    to : "feeling4design@gmail.com",
                    from_email : "no-reply@f4d.nl",
                    from_name : "My site title",
                    subject : "We received your request!",
                    conditions : {}
                }
            ]
        };
        localStorage.setItem('sf_form_data', JSON.stringify(data));
        return data;
    }
}


// Save form data in local storage
sf_app.save_form_data = function(data){
    localStorage.setItem('sf_form_data', JSON.stringify(data));
}

// Update form width 
sf_app.update_form_width = function(e, target){
    let data = sf_app.form_data(),
        value;
    if(!target){
        value = data.theme.form.width.size;
    }else{
        value = sf_app.append_px_unit(target.value);
        data.theme.form.width.size = value;
        // Update local storage
        sf_app.save_form_data(data);
    }
    sf_app.q('.sf-canvas-wrapper').style.width = value;
}

// Add new step (Multi-part)
sf_app.add_multipart_step = function(e, target){

    // Grab current form data
    let data = sf_app.form_data();

    const total = sf_app.obj_total(sf_app.form_data().parts)+1;
    const new_part = {
        settings : {
            title : "Title",
            desc : "Description",
            next : "Next",
            prev : "Previous"
        },
        elements : {}
    };

    // Add new part to the form data
    data.parts.push(new_part);

    // If total parts is 2 or more, then we need to add the steps and the progress bar
    if(total>=2){
        sf_app.generate_multipart_steps(data.parts, total);
        sf_app.generate_multipart_progressbar(total);
    }

    // Remove active class from parts
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });

    // Create drop area for this part
    let node  = document.createElement('div');
    node.classList.add('sf-drop-area');
    node.classList.add('sf-active');
    sf_app.q('.sf-form').appendChild(node);

    // Remove active class from steps
    const steps = sf_app.q('.sf-multipart-steps').children;
    let total_steps = 0;
    Object.keys(steps).forEach(function(key) {
        steps[key].classList.remove('sf-active');
        total_steps++;
    });
    steps[total_steps-1].classList.add('sf-active');

    // Update progress bar progress
    let progress = 100 / total_steps;
    progress = progress * (total_steps);
    sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';

    // Update local storage
    sf_app.save_form_data(data);
}

// Delete step (Multi-part)
sf_app.delete_multipart_step = function(e, target){
    // Let's get the active part, and delete it
    const active_part = sf_app.q('.sf-multipart-step.sf-active');
    let index = sf_app.index(active_part);
    
    // Also delete the part from the form data object
    // We use splice, because we want to keep a nice index order
    // This also prevents from having a "null" value
    let data = sf_app.form_data();
    data.parts.splice(index,1);

    const total = sf_app.obj_total(data.parts);
    sf_app.generate_multipart_steps(data.parts, total);
    sf_app.generate_multipart_progressbar(total, index);

    if(total>1){
        // Remove active class from steps
        const steps = sf_app.q('.sf-multipart-steps').children;
        Object.keys(steps).forEach(function(key) {
            steps[key].classList.remove('sf-active');
        });

        // Make previous step active
        if(typeof sf_app.q('.sf-multipart-steps').children[index-1] !== 'undefined'){
            sf_app.q('.sf-multipart-steps').children[index-1].classList.add('sf-active');
        }else{
            sf_app.q('.sf-multipart-steps').children[0].classList.add('sf-active');
        }
    }

    // Also remove active drop area
    sf_app.q('.sf-drop-area.sf-active').remove();
    
    // Make previous drop area active
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });
    if(index==0)  index++;
    if(typeof sf_app.q('.sf-form').children[index] !== 'undefined'){
        sf_app.q('.sf-form').children[index].classList.add('sf-active');
    }else{
        sf_app.q('.sf-form').children[1].classList.add('sf-active');
    }

    // Update local storage
    sf_app.save_form_data(data);
}


// Generate Multi-part Steps
sf_app.generate_multipart_steps = function(parts, total_parts){
    if(total_parts>1){
        
        // Show multi-part delete button
        sf_app.q('.sf-delete-multipart-step').style.display = null;

        sf_app.q('.sf-multipart').classList.add('sf-active');
        let html  = '';
        let counter = 1;
        Object.keys(parts).forEach(function(key) {
            const part = parts[key];
            const sfaction = ' data-sfaction="multipart_step_click"';
            if(total_parts==1){
                html += '<li class="sf-multipart-step sf-active sf-last-step"'+sfaction+'>';
            }else{
                if((key==0) && (total_parts != (key+1))){
                    html += '<li class="sf-multipart-step sf-active"'+sfaction+'>';
                }else{
                    if(total_parts == (key+1)){
                        html += '<li class="sf-multipart-step sf-last-step"'+sfaction+'>';
                    }else{
                        html += '<li class="sf-multipart-step"'+sfaction+'>';
                    }
                }
            }
            html += '<span class="sf-multipart-step-wrapper">';
            if(typeof part.icon !== 'undefined' && part.icon!='') {
                html += '<span class="sf-multipart-step-icon"><i class="fa fa-'+part.icon+'"></i></span>';
            }
            html += '<span class="sf-multipart-step-count">'+counter+'</span>';
            if(typeof part.title !== 'undefined' && part.title!='') {
                html += '<span class="sf-multipart-step-name">'+part.title+'</span>';
            }
            if(typeof part.desc !== 'undefined' && part.desc!='') {
                html += '<span class="sf-multipart-step-description">'+part.desc+'</span>';
            }
            html += '</span>';
            html += '</li>';
            counter++;
        });
        sf_app.q('.sf-multipart-steps').innerHTML = html;
    }else{
        // Delete the multi-part steps
        sf_app.q('.sf-multipart').classList.remove('sf-active');
        sf_app.q('.sf-multipart-steps').innerHTML = '';

        // Delete the multi-part progress bar
        if(sf_app.q('.sf-multipart-progress-inner')){
            sf_app.q('.sf-multipart-progress-inner').remove();
        }

        // Delete multi-part delete button
        sf_app.q('.sf-delete-multipart-step').style.display = 'none';
    }
}

// Generate Multi-part Progress Bar
sf_app.generate_multipart_progressbar = function(total_parts, index){
    if(total_parts>1){
        let progress = 100 / total_parts;
        // Only generate progress bar if it doesn't exist yet
        if(!sf_app.q('.sf-multipart-progress-inner')){
            // Generate progress bar
            let html = '<div class="sf-multipart-progress-inner">';
            html += '<div class="sf-multipart-progress-bar" style="width:'+progress+'%"></div>';
            html += '</div>';
            sf_app.q('.sf-multipart-progress').innerHTML = html;
        }
        if(index){
            // Update progress bar progress
            let progress = 100 / total_parts;
            progress = progress * (index);
            sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';
        }
    }
}

// Switch from multi-part
sf_app.multipart_step_click = function(e, target){
    const index =  sf_app.index(target);

    // Remove active class from steps
    const steps = sf_app.q('.sf-multipart-steps').children;
    let total_steps = 0;
    Object.keys(steps).forEach(function(key) {
        steps[key].classList.remove('sf-active');
        total_steps++;
    });
    target.classList.add('sf-active');

    // Remove active class from parts
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });
    sf_app.q('.sf-form').children[index+1].classList.add('sf-active');
    
    // Update progress bar progress
    let progress = 100 / total_steps;
    progress = progress * (index+1);
    sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';

}


// Remove any CSS stylesheets
let i = 0;
[].forEach.call(document.styleSheets, function(el) {
    if(el.href){
        //if(el.href.indexOf('super-forms/assets/css')!=-1){
            //document.styleSheets[i].disabled = true;
        //} 
    }
    i++;
});

// Scroll elements horizontally
function sf_scroll_horizontally(e) {
    e = window.event || e;
    const delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
    sf_app.q('.sf-elements .sf-items-wrapper').scrollLeft -= (delta*100); // Multiplied by 40
    e.preventDefault();
}
if (sf_app.q('.sf-elements .sf-items-wrapper').addEventListener) {
    let supportsPassive = false;
    try {
        const opts = Object.defineProperty({}, 'passive', {
            get: function() {
                supportsPassive = true;
            }
        });
        window.addEventListener("testPassive", null, opts);
        window.removeEventListener("testPassive", null, opts);
    } catch (e) {}

    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('mousewheel', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // IE9, Chrome, Safari, Opera
    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('DOMMouseScroll', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // Firefox
} else {
    sf_app.q('.sf-elements .sf-items-wrapper').attachEvent('onmousewheel', sf_scroll_horizontally); // IE 6/7/8
}


//function lengthInUtf8Bytes(str) {
//  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
//  var m = encodeURIComponent(str).match(/%[89ABab]/g);
//  return str.length + (m ? m.length : 0);
//}
//const $megabytes = lengthInUtf8Bytes($json)/1000000;
//console.log('megabytes: '+$megabytes);
console.log(super_create_form_i18n);


// Load UI
(function() {
    // Set form width
    sf_app.update_form_width();

    const parts = sf_app.form_data().parts;

    // Generate multi-part steps
    let total_parts = sf_app.obj_total(parts);

    // Generate multi-part steps
    if(total_parts>1){
        sf_app.generate_multipart_steps(parts, total_parts);
        sf_app.generate_multipart_progressbar(total_parts);
    }else{
        // Empty the multi-part and hide it if we have to
        sf_app.q('.sf-multipart').classList.remove('sf-active');
        sf_app.q('.sf-delete-multipart-step').style.display = 'none';
    }

    // Generate elements based on form data
    Object.keys(parts).forEach(function(key) {
        const part = parts[key];

        // Create drop area for this part
        let node  = document.createElement('div');
        node.classList.add('sf-drop-area');
        if(key==0){
            node.classList.add('sf-active');
        }

        // Generate elements HTML and append it to the part
        let html = '';
        Object.keys(part.elements).forEach(function(key) {
            const data = part.elements[key];
            Object.keys(data).forEach(function(k) {
                const name = k,
                      settings = data[k].settings,
                      inner = data[k].inner;
                html += sf_app.element_html(name, settings, inner);
            });
        });
        node.innerHTML = html;

        /*
        // Add the element to the form data
        sf_app.form_data().parts[0].elements[name] = {};
        // Update local storage
        sf_app.save_form_data(sf_app.form_data);
        */

        sf_app.q('.sf-form').appendChild(node);
    });

    // Remove loading class
    setTimeout(function(){
        sf_app.q('.sf-builder').classList.remove('loading');
    },500);

})();

// Equivalent for jQuery's .on() function
sf_app.delegate = function(element, event, elements, callback) {
    element.addEventListener(event, function(event) {
        let target = event.target;
        while (target && target !== this) {
            if (target.matches(elements)) {
                callback(event, target);
                return false;
            }
            target = target.parentNode;
        }
    });
};

sf_app.events = {
    keyup : [
        '.sf-canvas-width-fields input'
    ],
    click : [
        '.sf-multipart-step',
        '.sf-add-multipart-step',
        '.sf-delete-multipart-step',
        '.sf-items .sf-item',
        '.sf-drop-inside',
        '.sf-drop-area.sf-active .sf-element',
        '.sf-breadcrumb li',
        '.sf-breadcrumb li > span'
    ],
    mouseover : [
        '.sf-tooltip',
        '.sf-breadcrumb li'
    ],
    mouseout : [
        '.sf-tooltip',
        '.sf-breadcrumb li'
    ]
    //input : [
    //],
    //blur : [
    //]
};


// Iterate over all events, and listen to any event being triggered
Object.keys(sf_app.events).forEach(function(event) {
    const elements = sf_app.events[event].join(", ");
    sf_app.delegate(document, event, elements, function(e, target){
        console.log(event);
        console.log(target);

        if(event=='mouseover' || event=='mouseout'){
            if(typeof target.dataset.sftooltip !== 'undefined'){
                // First remove any other tooltip
                if(sf_app.q('.sf-tooltipper')){
                    sf_app.q('.sf-tooltipper').remove();
                }
                if(event=='mouseover'){
                    // Create tooltip 
                    let node  = document.createElement('div');
                    node.classList.add('sf-tooltipper');
                    node.innerHTML = target.dataset.sftooltip;

                    // Get the position relative to the viewport (i.e. the window)
                    const offset = target.getBoundingClientRect();
                    const target_absolute_position_left = offset.left+(offset.width/2);
                    //const margins = getComputedStyle(target);
                    //const target_height = target.offsetHeight + parseInt(margins.marginTop) + parseInt(margins.marginBottom);
                    const w = window,
                        d = document,
                        e = d.documentElement,
                        g = d.getElementsByTagName('body')[0],
                        window_width = w.innerWidth || e.clientWidth || g.clientWidth,
                        window_height = w.innerHeight|| e.clientHeight|| g.clientHeight;

                    node.style.position = 'absolute';
                    node.style.top = 0;
                    node.style.left = 0;

                    // Append the node
                    sf_app.q('body').appendChild(node);
                    const initial_width = node.offsetWidth;

                    if(typeof target.dataset.sftooltipPosition === 'undefined'){
                        node.style.top = offset.top+'px';
                        node.style.transform = 'translateX(-50%) translateY(-150%)';
                    }
                    if(typeof target.dataset.sftooltipPosition !== 'undefined'){
                        node.classList.add('sf-bottom');
                        node.style.top = offset.top+(offset.height)+'px';
                        node.style.transform = 'translateX(-50%) translateY(50%)';
                    }
                    node.style.left = target_absolute_position_left+'px';
                    
                    // Check if we can't position the element at top or bottom because of overlapping window
                    // The tooltip could possibly be cut off if we do not check this
                    if(window_width < target_absolute_position_left+initial_width){
                        // We have to position the tooltip to the left side of the target
                        node.style.transform = null;
                        node.style.left = (offset.left-initial_width-30)+'px';
                        node.classList.remove('sf-bottom');
                        node.classList.add('sf-left');
                    }
                }
                return false;
            }
        }

        if(typeof target.dataset.sfaction !== 'undefined'){
            if(sf_app.q('.sf-tooltipper')){
                sf_app.q('.sf-tooltipper').remove();
            }
            console.log(target.dataset.sfaction);
            if(target.dataset.sfaction.indexOf(';')!==-1){
                let action = target.dataset.sfaction.split(';'),
                function_name = action[0],
                element_name = action[1];
                sf_app[function_name](e, target, element_name, event);
            }else{
                sf_app[target.dataset.sfaction](e, target);
            }
        }
    });
});
