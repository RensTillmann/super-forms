"use strict"; // Minimize mutable state :)

const sf_app = {};

// querySelector shorthand
sf_app.q = function(selector){
    return document.querySelector(selector);
}

// querySelectorAll shorthand
sf_app.qa = function(selector){
    return document.querySelectorAll(selector);
}

// Generate element HTML
sf_app.create_element = function(name){
    // Generate the element HTML and append it to the canvas
    let node  = document.createElement('div');
    // Add class names, and make sure to remove any numbesr from the 'name' string
    node.className = 'sf-element sf-'+name.replace(/[0-9]/g, '');
    // Check if we need to add a specific class
    if(super_create_form_i18n.elements[name].class){
        node.classList.add(super_create_form_i18n.elements[name].class);
    }
    let html = '<div class="sf-wrapper">';
    // Check if element can contain inner elements
    if(super_create_form_i18n.elements[name].inner){
        html += '<div class="sf-inner"></div>';
    }
    // Check for custom HTML
    if(super_create_form_i18n.elements[name].html){
        html += super_create_form_i18n.elements[name].html;
    }
    html += '</div>';
    node.innerHTML = html;
    return node;
}

// Drop element inside (for instance inside a column)
sf_app.drop_inside = function(target, name){
    console.log(name, target);
    // If we need to add this item more than 1 time
    // For instance with columns we require to add 3 columns if we selected to add the 1/3 grid
    if(!super_create_form_i18n.elements[name].times) super_create_form_i18n.elements[name].times = 1;
    let i = 0;
    while(super_create_form_i18n.elements[name].times > i){
        // Append the element
        target.parentNode.querySelector('.sf-inner').appendChild(sf_app.create_element(name));
        i++;
    }
    // After the element was added, remove dropping class
    sf_app.q('.sf-form').classList.remove('sf-dropping');
    // Also remove all the buttons
    const nodes = sf_app.qa('.sf-drop-inside');
    Object.keys(nodes).forEach(function(key) {
        nodes[key].remove();
    });
    // Remove active class on item in elements list
    sf_app.q('.sf-item.sf-active').classList.remove('sf-active');
}

// Add element to drop area
sf_app.add_element = function(target, name){
    console.log(name);
    // Check if the active drop area has no elements yet, then instantly add it to the canvas
    if(sf_app.q('.sf-drop-area.sf-active').children.length==0){
        // If we need to add this item more than 1 time
        // For instance with columns we require to add 3 columns if we selected to add the 1/3 grid
        if(!super_create_form_i18n.elements[name].times) super_create_form_i18n.elements[name].times = 1;
        let i = 0;
        while(super_create_form_i18n.elements[name].times > i){
            // Append the element
            sf_app.q('.sf-drop-area.sf-active').appendChild(sf_app.create_element(name));
            i++;
        }
    }else{
        // Add global dropping class
        sf_app.q('.sf-form').classList.add('sf-dropping');
        // There is at least one element, so let's activate dropping status
        // First give clicked element opacity
        sf_app.q('.sf-item.sf-type-'+name).classList.add('sf-active');
        // Add drop here buttons
        const nodes = sf_app.qa('.sf-form .sf-inner');
        Object.keys(nodes).forEach(function(key) {
            let node  = document.createElement('div');
            node.className = 'sf-drop-inside';
            node.dataset['sfaction'] = 'drop_inside;'+name;
            nodes[key].parentNode.appendChild(node);
        });
    }
}

// Get index of element based on parent node
sf_app.index = function(node){
    var index = 0;
    while ( (node = node.previousElementSibling) ) {
        index++;
    }
    return index;
}

// Get total items of an object
sf_app.obj_total = function(obj){
    let total = 0;
    Object.keys(obj).forEach(function(key) {
        total++;
    });
    return total;
}

// Update form width 
sf_app.append_px_unit = function(value){
    if( !isNaN(value) ) {
        // The value does not contain a unit yet, let's append 'px' to it
        return value.replace('px','').trim()+'px';
    }
    return value;
}

sf_app.form_data = localStorage.getItem('sf_form_data');
if(sf_app.form_data){
    sf_app.form_data = JSON.parse(sf_app.form_data);
}else{
    sf_app.form_data = {
        parts : [
            {
                settings : {
                    title : super_create_form_i18n.Title,
                    desc : super_create_form_i18n.Description,
                    next : super_create_form_i18n.Next,
                    prev : super_create_form_i18n.Previous
                },
                elements : {
                    text : {
                        name : super_create_form_i18n.field,
                        placeholder : super_create_form_i18n.Dummy_placeholder,
                        label : super_create_form_i18n.Dummy_label
                    }
                }
            }
        ],
        settings : {},
        theme : {
            form : {
                width : {
                    size: '100%'
                },
                bg_color : "#fff",
                padding : {
                    top : "0",
                    right : "0",
                    bottom : "0",
                    left : "0"
                },
                margin : {
                    top : "0",
                    right : "0",
                    bottom : "0",
                    left : "0"
                },
                border : {
                    top : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    right : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    bottom : {
                        size : "0",
                        color : "",
                        style : "solid"
                    },
                    left : {
                        size : "0",
                        color : "",
                        style : "solid"
                    }
                }
            }
        },
        triggers : [
            {
                on : "submit",
                action : "send_mail",
                priority : "0",
                to : "feeling4design@gmail.com",
                from_email : "no-reply@f4d.nl",
                from_name : "My site title",
                subject : "New request",
                conditions : {}
            },
            {
                on : "submit",
                action : "send_mail",
                priority : "0",
                to : "feeling4design@gmail.com",
                from_email : "no-reply@f4d.nl",
                from_name : "My site title",
                subject : "We received your request!",
                conditions : {}
            }
        ]
    };
    localStorage.setItem('sf_form_data', JSON.stringify(sf_app.form_data));
}

// Save form data in local storage
sf_app.save_form_data = function(data){
    localStorage.setItem('sf_form_data', JSON.stringify(data));
}

// Update form width 
sf_app.update_form_width = function(target){
    let value;
    if(!target){
        value = sf_app.form_data.theme.form.width.size;
    }else{
        value = sf_app.append_px_unit(target.value);
        sf_app.form_data.theme.form.width.size = value;
        // Update local storage
        sf_app.save_form_data(sf_app.form_data);
    }
    sf_app.q('.sf-canvas-wrapper').style.width = value;
}

// Add new step (Multi-part)
sf_app.add_multipart_step = function(target){
    const total = sf_app.obj_total(sf_app.form_data.parts)+1;
    const new_part = {
        settings : {
            title : "Title",
            desc : "Description",
            next : "Next",
            prev : "Previous"
        },
        elements : {}
    };
    sf_app.form_data.parts.push(new_part);

    // If total parts is 2 or more, then we need to add the steps and the progress bar
    if(total>=2){
        sf_app.generate_multipart_steps(sf_app.form_data.parts, total);
        sf_app.generate_multipart_progressbar(total);
    }

    // Remove active class from parts
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });

    // Create drop area for this part
    let node  = document.createElement('div');
    node.classList.add('sf-drop-area');
    node.classList.add('sf-active');
    sf_app.q('.sf-form').appendChild(node);

    // Remove active class from steps
    const steps = sf_app.q('.sf-multipart-steps').children;
    let total_steps = 0;
    Object.keys(steps).forEach(function(key) {
        steps[key].classList.remove('sf-active');
        total_steps++;
    });
    steps[total_steps-1].classList.add('sf-active');

    // Update progress bar progress
    let progress = 100 / total_steps;
    progress = progress * (total_steps);
    sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';

    // Update local storage
    sf_app.save_form_data(sf_app.form_data);
}

// Delete step (Multi-part)
sf_app.delete_multipart_step = function(target){
    // Let's get the active part, and delete it
    const active_part = sf_app.q('.sf-multipart-step.sf-active');
    let index = sf_app.index(active_part);
    
    // Also delete the part from the form data object
    // We use splice, because we want to keep a nice index order
    // This also prevents from having a "null" value
    sf_app.form_data.parts.splice(index,1);

    const total = sf_app.obj_total(sf_app.form_data.parts);
    sf_app.generate_multipart_steps(sf_app.form_data.parts, total);
    sf_app.generate_multipart_progressbar(total, index);

    if(total>1){
        // Remove active class from steps
        const steps = sf_app.q('.sf-multipart-steps').children;
        Object.keys(steps).forEach(function(key) {
            steps[key].classList.remove('sf-active');
        });

        // Make previous step active
        if(typeof sf_app.q('.sf-multipart-steps').children[index-1] !== 'undefined'){
            sf_app.q('.sf-multipart-steps').children[index-1].classList.add('sf-active');
        }else{
            sf_app.q('.sf-multipart-steps').children[0].classList.add('sf-active');
        }
    }

    // Also remove active drop area
    sf_app.q('.sf-drop-area.sf-active').remove();
    
    // Make previous drop area active
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });
    if(index==0)  index++;
    if(typeof sf_app.q('.sf-form').children[index] !== 'undefined'){
        sf_app.q('.sf-form').children[index].classList.add('sf-active');
    }else{
        sf_app.q('.sf-form').children[1].classList.add('sf-active');
    }

    // Update local storage
    sf_app.save_form_data(sf_app.form_data);
}


// Generate Multi-part Steps
sf_app.generate_multipart_steps = function(parts, total_parts){
    if(total_parts>1){
        
        // Show multi-part delete button
        sf_app.q('.sf-delete-multipart-step').style.display = null;

        sf_app.q('.sf-multipart').classList.add('sf-active');
        let html  = '';
        let counter = 1;
        Object.keys(parts).forEach(function(key) {
            const part = parts[key];
            const sfaction = ' data-sfaction="multipart_step_click"';
            if(total_parts==1){
                html += '<li class="sf-multipart-step sf-active sf-last-step"'+sfaction+'>';
            }else{
                if((key==0) && (total_parts != (key+1))){
                    html += '<li class="sf-multipart-step sf-active"'+sfaction+'>';
                }else{
                    if(total_parts == (key+1)){
                        html += '<li class="sf-multipart-step sf-last-step"'+sfaction+'>';
                    }else{
                        html += '<li class="sf-multipart-step"'+sfaction+'>';
                    }
                }
            }
            html += '<span class="sf-multipart-step-wrapper">';
            if(typeof part.icon !== 'undefined' && part.icon!='') {
                html += '<span class="sf-multipart-step-icon"><i class="fa fa-'+part.icon+'"></i></span>';
            }
            html += '<span class="sf-multipart-step-count">'+counter+'</span>';
            if(typeof part.title !== 'undefined' && part.title!='') {
                html += '<span class="sf-multipart-step-name">'+part.title+'</span>';
            }
            if(typeof part.desc !== 'undefined' && part.desc!='') {
                html += '<span class="sf-multipart-step-description">'+part.desc+'</span>';
            }
            html += '</span>';
            html += '</li>';
            counter++;
        });
        sf_app.q('.sf-multipart-steps').innerHTML = html;
    }else{
        // Delete the multi-part steps
        sf_app.q('.sf-multipart').classList.remove('sf-active');
        sf_app.q('.sf-multipart-steps').innerHTML = '';

        // Delete the multi-part progress bar
        if(sf_app.q('.sf-multipart-progress-inner')){
            sf_app.q('.sf-multipart-progress-inner').remove();
        }

        // Delete multi-part delete button
        sf_app.q('.sf-delete-multipart-step').style.display = 'none';
    }
}

// Generate Multi-part Progress Bar
sf_app.generate_multipart_progressbar = function(total_parts, index){
    if(total_parts>1){
        let progress = 100 / total_parts;
        // Only generate progress bar if it doesn't exist yet
        if(!sf_app.q('.sf-multipart-progress-inner')){
            // Generate progress bar
            let html = '<div class="sf-multipart-progress-inner">';
            html += '<div class="sf-multipart-progress-bar" style="width:'+progress+'%"></div>';
            html += '</div>';
            sf_app.q('.sf-multipart-progress').innerHTML = html;
        }
        if(index){
            // Update progress bar progress
            let progress = 100 / total_parts;
            progress = progress * (index);
            sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';
        }
    }
}

// Switch from multi-part
sf_app.multipart_step_click = function(target){
    const index =  sf_app.index(target);

    // Remove active class from steps
    const steps = sf_app.q('.sf-multipart-steps').children;
    let total_steps = 0;
    Object.keys(steps).forEach(function(key) {
        steps[key].classList.remove('sf-active');
        total_steps++;
    });
    target.classList.add('sf-active');

    // Remove active class from parts
    const parts = sf_app.qa('.sf-form .sf-drop-area');
    Object.keys(parts).forEach(function(key) {
        parts[key].classList.remove('sf-active');
    });
    sf_app.q('.sf-form').children[index+1].classList.add('sf-active');
    
    // Update progress bar progress
    let progress = 100 / total_steps;
    progress = progress * (index+1);
    sf_app.q('.sf-multipart-progress-bar').style.width = progress+'%';

}


// Remove any CSS stylesheets
let i = 0;
[].forEach.call(document.styleSheets, function(el) {
    if(el.href){
        //if(el.href.indexOf('super-forms/assets/css')!=-1){
            //document.styleSheets[i].disabled = true;
        //} 
    }
    i++;
});

// Scroll elements horizontally
function sf_scroll_horizontally(e) {
    e = window.event || e;
    var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
    sf_app.q('.sf-elements .sf-items-wrapper').scrollLeft -= (delta*100); // Multiplied by 40
    e.preventDefault();
}
if (sf_app.q('.sf-elements .sf-items-wrapper').addEventListener) {
    var supportsPassive = false;
    try {
        var opts = Object.defineProperty({}, 'passive', {
            get: function() {
                supportsPassive = true;
            }
        });
        window.addEventListener("testPassive", null, opts);
        window.removeEventListener("testPassive", null, opts);
    } catch (e) {}

    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('mousewheel', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // IE9, Chrome, Safari, Opera
    sf_app.q('.sf-elements .sf-items-wrapper').addEventListener('DOMMouseScroll', sf_scroll_horizontally, supportsPassive ? { passive: false } : false); // Firefox
} else {
    sf_app.q('.sf-elements .sf-items-wrapper').attachEvent('onmousewheel', sf_scroll_horizontally); // IE 6/7/8
}


//function lengthInUtf8Bytes(str) {
//  // Matches only the 10.. bytes that are non-initial characters in a multi-byte sequence.
//  var m = encodeURIComponent(str).match(/%[89ABab]/g);
//  return str.length + (m ? m.length : 0);
//}
//const $megabytes = lengthInUtf8Bytes($json)/1000000;
//console.log('megabytes: '+$megabytes);
console.log(super_create_form_i18n);


// Load UI
(function() {
    // Set form width
    sf_app.update_form_width();

    const parts = sf_app.form_data.parts;

    // Generate multi-part steps
    let total_parts = sf_app.obj_total(parts);

    // Generate multi-part steps
    if(total_parts>1){
        sf_app.generate_multipart_steps(parts, total_parts);
        sf_app.generate_multipart_progressbar(total_parts);
    }else{
        // Empty the multi-part and hide it if we have to
        sf_app.q('.sf-multipart').classList.remove('sf-active');
        sf_app.q('.sf-delete-multipart-step').style.display = 'none';
    }

    // Generate elements based on form data
    Object.keys(parts).forEach(function(key) {
        const part = parts[key];

        // Create drop area for this part
        let node  = document.createElement('div');
        node.classList.add('sf-drop-area');
        if(key==0){
            node.classList.add('sf-active');
        }
        sf_app.q('.sf-form').appendChild(node);
    });

    // Remove loading class
    sf_app.q('.sf-builder').classList.remove('loading');
})();


const app = {};
app.panel = {};

// Equivalent for jQuery's .on() function
app.delegate = function(element, event, elements, callback) {
    element.addEventListener(event, function(event) {
        var target = event.target;
        while (target && target !== this) {
            if (target.matches(elements)) {
                callback(event, target);
                return false;
            }
            target = target.parentNode;
        }
    });
};
app.panel.events = {
    keyup : [
        '.sf-canvas-width-fields input'
    ],
    click : [
        '.sf-multipart-step',
        '.sf-add-multipart-step',
        '.sf-delete-multipart-step',
        '.sf-items .sf-item',
        '.sf-drop-inside'
    ],
    mouseover : [
        '.sf-tooltip'
    ],
    mouseout : [
        '.sf-tooltip'
    ]
    //input : [
    //],
    //blur : [
    //]
};

// Iterate over all events, and listen to any event being triggered
Object.keys(app.panel.events).forEach(function(event) {
    const elements = app.panel.events[event].join(", ");
    app.delegate(document, event, elements, function(e, target){
        console.log(target);
        
        if(event=='mouseover' || event=='mouseout'){
            if(typeof target.dataset.sftooltip !== 'undefined'){
                // First remove any other tooltip
                if(sf_app.q('.sf-tooltipper')){
                    sf_app.q('.sf-tooltipper').remove();
                }
                if(event=='mouseover'){
                    // Create tooltip 
                    let node  = document.createElement('div');
                    node.classList.add('sf-tooltipper');
                    node.innerHTML = target.dataset.sftooltip;

                    // Get the position relative to the viewport (i.e. the window)
                    const offset = target.getBoundingClientRect();
                    const target_absolute_position_left = offset.left+(offset.width/2);
                    //const margins = getComputedStyle(target);
                    //const target_height = target.offsetHeight + parseInt(margins.marginTop) + parseInt(margins.marginBottom);
                    const w = window,
                        d = document,
                        e = d.documentElement,
                        g = d.getElementsByTagName('body')[0],
                        window_width = w.innerWidth || e.clientWidth || g.clientWidth,
                        window_height = w.innerHeight|| e.clientHeight|| g.clientHeight;

                    node.style.position = 'absolute';
                    node.style.top = 0;
                    node.style.left = 0;

                    // Append the node
                    sf_app.q('body').appendChild(node);
                    const initial_width = node.offsetWidth;

                    if(typeof target.dataset.sftooltipPosition === 'undefined'){
                        node.style.top = offset.top+'px';
                        node.style.transform = 'translateX(-50%) translateY(-150%)';
                    }
                    if(typeof target.dataset.sftooltipPosition !== 'undefined'){
                        node.classList.add('sf-bottom');
                        node.style.top = offset.top+(offset.height)+'px';
                        node.style.transform = 'translateX(-50%) translateY(50%)';
                    }
                    node.style.left = target_absolute_position_left+'px';
                    
                    // Check if we can't position the element at top or bottom because of overlapping window
                    // The tooltip could possibly be cut off if we do not check this
                    if(window_width < target_absolute_position_left+initial_width){
                        // We have to position the tooltip to the left side of the target
                        node.style.transform = null;
                        node.style.left = (offset.left-initial_width-30)+'px';
                        node.classList.remove('sf-bottom');
                        node.classList.add('sf-left');
                    }
                }
                return false;
            }
        }

        if(typeof target.dataset.sfaction !== 'undefined'){
            console.log(target.dataset.sfaction);
            if(target.dataset.sfaction.indexOf(';')!==-1){
                let action = target.dataset.sfaction.split(';'),
                function_name = action[0],
                element_name = action[1];
                sf_app[function_name](target, element_name);
            }else{
                sf_app[target.dataset.sfaction](target);
            }
        }
    });
});
